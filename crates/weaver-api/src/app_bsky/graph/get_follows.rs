// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.getFollows
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetFollows<'a> {
    #[serde(borrow)]
    pub actor: jacquard_common::types::ident::AtIdentifier<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
}

pub mod get_follows_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Actor;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Actor = Unset;
    }
    ///State transition - sets the `actor` field to Set
    pub struct SetActor<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetActor<S> {}
    impl<S: State> State for SetActor<S> {
        type Actor = Set<members::actor>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `actor` field
        pub struct actor(());
    }
}

/// Builder for constructing an instance of this type
pub struct GetFollowsBuilder<'a, S: get_follows_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::ident::AtIdentifier<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<i64>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> GetFollows<'a> {
    /// Create a new builder for this type
    pub fn new() -> GetFollowsBuilder<'a, get_follows_state::Empty> {
        GetFollowsBuilder::new()
    }
}

impl<'a> GetFollowsBuilder<'a, get_follows_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        GetFollowsBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> GetFollowsBuilder<'a, S>
where
    S: get_follows_state::State,
    S::Actor: get_follows_state::IsUnset,
{
    /// Set the `actor` field (required)
    pub fn actor(
        mut self,
        value: impl Into<jacquard_common::types::ident::AtIdentifier<'a>>,
    ) -> GetFollowsBuilder<'a, get_follows_state::SetActor<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        GetFollowsBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: get_follows_state::State> GetFollowsBuilder<'a, S> {
    /// Set the `cursor` field (optional)
    pub fn cursor(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `cursor` field to an Option value (optional)
    pub fn maybe_cursor(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S: get_follows_state::State> GetFollowsBuilder<'a, S> {
    /// Set the `limit` field (optional)
    pub fn limit(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.2 = value.into();
        self
    }
    /// Set the `limit` field to an Option value (optional)
    pub fn maybe_limit(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.2 = value;
        self
    }
}

impl<'a, S> GetFollowsBuilder<'a, S>
where
    S: get_follows_state::State,
    S::Actor: get_follows_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> GetFollows<'a> {
        GetFollows {
            actor: self.__unsafe_private_named.0.unwrap(),
            cursor: self.__unsafe_private_named.1,
            limit: self.__unsafe_private_named.2,
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetFollowsOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub follows: Vec<crate::app_bsky::actor::ProfileView<'a>>,
    #[serde(borrow)]
    pub subject: crate::app_bsky::actor::ProfileView<'a>,
}

/// Response type for
///app.bsky.graph.getFollows
pub struct GetFollowsResponse;
impl jacquard_common::xrpc::XrpcResp for GetFollowsResponse {
    const NSID: &'static str = "app.bsky.graph.getFollows";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetFollowsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetFollows<'a> {
    const NSID: &'static str = "app.bsky.graph.getFollows";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetFollowsResponse;
}

/// Endpoint type for
///app.bsky.graph.getFollows
pub struct GetFollowsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetFollowsRequest {
    const PATH: &'static str = "/xrpc/app.bsky.graph.getFollows";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetFollows<'de>;
    type Response = GetFollowsResponse;
}