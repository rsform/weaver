// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.getListsWithMembership
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// A list and an optional list item indicating membership of a target user to that list.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ListWithMembership<'a> {
    #[serde(borrow)]
    pub list: crate::app_bsky::graph::ListView<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub list_item: Option<crate::app_bsky::graph::ListItemView<'a>>,
}

pub mod list_with_membership_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type List;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type List = Unset;
    }
    ///State transition - sets the `list` field to Set
    pub struct SetList<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetList<S> {}
    impl<S: State> State for SetList<S> {
        type List = Set<members::list>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `list` field
        pub struct list(());
    }
}

/// Builder for constructing an instance of this type
pub struct ListWithMembershipBuilder<'a, S: list_with_membership_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<crate::app_bsky::graph::ListView<'a>>,
        ::core::option::Option<crate::app_bsky::graph::ListItemView<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> ListWithMembership<'a> {
    /// Create a new builder for this type
    pub fn new() -> ListWithMembershipBuilder<'a, list_with_membership_state::Empty> {
        ListWithMembershipBuilder::new()
    }
}

impl<'a> ListWithMembershipBuilder<'a, list_with_membership_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        ListWithMembershipBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> ListWithMembershipBuilder<'a, S>
where
    S: list_with_membership_state::State,
    S::List: list_with_membership_state::IsUnset,
{
    /// Set the `list` field (required)
    pub fn list(
        mut self,
        value: impl Into<crate::app_bsky::graph::ListView<'a>>,
    ) -> ListWithMembershipBuilder<'a, list_with_membership_state::SetList<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        ListWithMembershipBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: list_with_membership_state::State> ListWithMembershipBuilder<'a, S> {
    /// Set the `listItem` field (optional)
    pub fn list_item(
        mut self,
        value: impl Into<Option<crate::app_bsky::graph::ListItemView<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `listItem` field to an Option value (optional)
    pub fn maybe_list_item(
        mut self,
        value: Option<crate::app_bsky::graph::ListItemView<'a>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S> ListWithMembershipBuilder<'a, S>
where
    S: list_with_membership_state::State,
    S::List: list_with_membership_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> ListWithMembership<'a> {
        ListWithMembership {
            list: self.__unsafe_private_named.0.unwrap(),
            list_item: self.__unsafe_private_named.1,
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> ListWithMembership<'a> {
        ListWithMembership {
            list: self.__unsafe_private_named.0.unwrap(),
            list_item: self.__unsafe_private_named.1,
            extra_data: Some(extra_data),
        }
    }
}

fn lexicon_doc_app_bsky_graph_getListsWithMembership() -> ::jacquard_lexicon::lexicon::LexiconDoc<
    'static,
> {
    ::jacquard_lexicon::lexicon::LexiconDoc {
        lexicon: ::jacquard_lexicon::lexicon::Lexicon::Lexicon1,
        id: ::jacquard_common::CowStr::new_static(
            "app.bsky.graph.getListsWithMembership",
        ),
        revision: None,
        description: None,
        defs: {
            let mut map = ::std::collections::BTreeMap::new();
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("listWithMembership"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: Some(
                        ::jacquard_common::CowStr::new_static(
                            "A list and an optional list item indicating membership of a target user to that list.",
                        ),
                    ),
                    required: Some(
                        vec![::jacquard_common::smol_str::SmolStr::new_static("list")],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("list"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static(
                                    "app.bsky.graph.defs#listView",
                                ),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("listItem"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static(
                                    "app.bsky.graph.defs#listItemView",
                                ),
                            }),
                        );
                        map
                    },
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("main"),
                ::jacquard_lexicon::lexicon::LexUserType::XrpcQuery(::jacquard_lexicon::lexicon::LexXrpcQuery {
                    description: None,
                    parameters: Some(
                        ::jacquard_lexicon::lexicon::LexXrpcQueryParameter::Params(::jacquard_lexicon::lexicon::LexXrpcParameters {
                            description: None,
                            required: Some(
                                vec![
                                    ::jacquard_common::smol_str::SmolStr::new_static("actor")
                                ],
                            ),
                            properties: {
                                #[allow(unused_mut)]
                                let mut map = ::std::collections::BTreeMap::new();
                                map.insert(
                                    ::jacquard_common::smol_str::SmolStr::new_static("actor"),
                                    ::jacquard_lexicon::lexicon::LexXrpcParametersProperty::String(::jacquard_lexicon::lexicon::LexString {
                                        description: Some(
                                            ::jacquard_common::CowStr::new_static(
                                                "The account (actor) to check for membership.",
                                            ),
                                        ),
                                        format: Some(
                                            ::jacquard_lexicon::lexicon::LexStringFormat::AtIdentifier,
                                        ),
                                        default: None,
                                        min_length: None,
                                        max_length: None,
                                        min_graphemes: None,
                                        max_graphemes: None,
                                        r#enum: None,
                                        r#const: None,
                                        known_values: None,
                                    }),
                                );
                                map.insert(
                                    ::jacquard_common::smol_str::SmolStr::new_static("cursor"),
                                    ::jacquard_lexicon::lexicon::LexXrpcParametersProperty::String(::jacquard_lexicon::lexicon::LexString {
                                        description: None,
                                        format: None,
                                        default: None,
                                        min_length: None,
                                        max_length: None,
                                        min_graphemes: None,
                                        max_graphemes: None,
                                        r#enum: None,
                                        r#const: None,
                                        known_values: None,
                                    }),
                                );
                                map.insert(
                                    ::jacquard_common::smol_str::SmolStr::new_static("limit"),
                                    ::jacquard_lexicon::lexicon::LexXrpcParametersProperty::Integer(::jacquard_lexicon::lexicon::LexInteger {
                                        description: None,
                                        default: None,
                                        minimum: None,
                                        maximum: None,
                                        r#enum: None,
                                        r#const: None,
                                    }),
                                );
                                map.insert(
                                    ::jacquard_common::smol_str::SmolStr::new_static(
                                        "purposes",
                                    ),
                                    ::jacquard_lexicon::lexicon::LexXrpcParametersProperty::Array(::jacquard_lexicon::lexicon::LexPrimitiveArray {
                                        description: None,
                                        items: ::jacquard_lexicon::lexicon::LexPrimitiveArrayItem::String(::jacquard_lexicon::lexicon::LexString {
                                            description: None,
                                            format: None,
                                            default: None,
                                            min_length: None,
                                            max_length: None,
                                            min_graphemes: None,
                                            max_graphemes: None,
                                            r#enum: None,
                                            r#const: None,
                                            known_values: None,
                                        }),
                                        min_length: None,
                                        max_length: None,
                                    }),
                                );
                                map
                            },
                        }),
                    ),
                    output: None,
                    errors: None,
                }),
            );
            map
        },
    }
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for ListWithMembership<'a> {
    fn nsid() -> &'static str {
        "app.bsky.graph.getListsWithMembership"
    }
    fn def_name() -> &'static str {
        "listWithMembership"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_app_bsky_graph_getListsWithMembership()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        Ok(())
    }
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetListsWithMembership<'a> {
    #[serde(borrow)]
    pub actor: jacquard_common::types::ident::AtIdentifier<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub purposes: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
}

pub mod get_lists_with_membership_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Actor;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Actor = Unset;
    }
    ///State transition - sets the `actor` field to Set
    pub struct SetActor<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetActor<S> {}
    impl<S: State> State for SetActor<S> {
        type Actor = Set<members::actor>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `actor` field
        pub struct actor(());
    }
}

/// Builder for constructing an instance of this type
pub struct GetListsWithMembershipBuilder<'a, S: get_lists_with_membership_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::ident::AtIdentifier<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<i64>,
        ::core::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> GetListsWithMembership<'a> {
    /// Create a new builder for this type
    pub fn new() -> GetListsWithMembershipBuilder<
        'a,
        get_lists_with_membership_state::Empty,
    > {
        GetListsWithMembershipBuilder::new()
    }
}

impl<'a> GetListsWithMembershipBuilder<'a, get_lists_with_membership_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        GetListsWithMembershipBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> GetListsWithMembershipBuilder<'a, S>
where
    S: get_lists_with_membership_state::State,
    S::Actor: get_lists_with_membership_state::IsUnset,
{
    /// Set the `actor` field (required)
    pub fn actor(
        mut self,
        value: impl Into<jacquard_common::types::ident::AtIdentifier<'a>>,
    ) -> GetListsWithMembershipBuilder<
        'a,
        get_lists_with_membership_state::SetActor<S>,
    > {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        GetListsWithMembershipBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<
    'a,
    S: get_lists_with_membership_state::State,
> GetListsWithMembershipBuilder<'a, S> {
    /// Set the `cursor` field (optional)
    pub fn cursor(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `cursor` field to an Option value (optional)
    pub fn maybe_cursor(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<
    'a,
    S: get_lists_with_membership_state::State,
> GetListsWithMembershipBuilder<'a, S> {
    /// Set the `limit` field (optional)
    pub fn limit(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.2 = value.into();
        self
    }
    /// Set the `limit` field to an Option value (optional)
    pub fn maybe_limit(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.2 = value;
        self
    }
}

impl<
    'a,
    S: get_lists_with_membership_state::State,
> GetListsWithMembershipBuilder<'a, S> {
    /// Set the `purposes` field (optional)
    pub fn purposes(
        mut self,
        value: impl Into<Option<Vec<jacquard_common::CowStr<'a>>>>,
    ) -> Self {
        self.__unsafe_private_named.3 = value.into();
        self
    }
    /// Set the `purposes` field to an Option value (optional)
    pub fn maybe_purposes(
        mut self,
        value: Option<Vec<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.3 = value;
        self
    }
}

impl<'a, S> GetListsWithMembershipBuilder<'a, S>
where
    S: get_lists_with_membership_state::State,
    S::Actor: get_lists_with_membership_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> GetListsWithMembership<'a> {
        GetListsWithMembership {
            actor: self.__unsafe_private_named.0.unwrap(),
            cursor: self.__unsafe_private_named.1,
            limit: self.__unsafe_private_named.2,
            purposes: self.__unsafe_private_named.3,
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetListsWithMembershipOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub lists_with_membership: Vec<
        crate::app_bsky::graph::get_lists_with_membership::ListWithMembership<'a>,
    >,
}

/// Response type for
///app.bsky.graph.getListsWithMembership
pub struct GetListsWithMembershipResponse;
impl jacquard_common::xrpc::XrpcResp for GetListsWithMembershipResponse {
    const NSID: &'static str = "app.bsky.graph.getListsWithMembership";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetListsWithMembershipOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetListsWithMembership<'a> {
    const NSID: &'static str = "app.bsky.graph.getListsWithMembership";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetListsWithMembershipResponse;
}

/// Endpoint type for
///app.bsky.graph.getListsWithMembership
pub struct GetListsWithMembershipRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetListsWithMembershipRequest {
    const PATH: &'static str = "/xrpc/app.bsky.graph.getListsWithMembership";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetListsWithMembership<'de>;
    type Response = GetListsWithMembershipResponse;
}