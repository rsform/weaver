// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.getStarterPack
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetStarterPack<'a> {
    #[serde(borrow)]
    pub starter_pack: jacquard_common::types::string::AtUri<'a>,
}

pub mod get_starter_pack_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type StarterPack;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type StarterPack = Unset;
    }
    ///State transition - sets the `starter_pack` field to Set
    pub struct SetStarterPack<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetStarterPack<S> {}
    impl<S: State> State for SetStarterPack<S> {
        type StarterPack = Set<members::starter_pack>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `starter_pack` field
        pub struct starter_pack(());
    }
}

/// Builder for constructing an instance of this type
pub struct GetStarterPackBuilder<'a, S: get_starter_pack_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::string::AtUri<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> GetStarterPack<'a> {
    /// Create a new builder for this type
    pub fn new() -> GetStarterPackBuilder<'a, get_starter_pack_state::Empty> {
        GetStarterPackBuilder::new()
    }
}

impl<'a> GetStarterPackBuilder<'a, get_starter_pack_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        GetStarterPackBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None,),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> GetStarterPackBuilder<'a, S>
where
    S: get_starter_pack_state::State,
    S::StarterPack: get_starter_pack_state::IsUnset,
{
    /// Set the `starterPack` field (required)
    pub fn starter_pack(
        mut self,
        value: impl Into<jacquard_common::types::string::AtUri<'a>>,
    ) -> GetStarterPackBuilder<'a, get_starter_pack_state::SetStarterPack<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        GetStarterPackBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> GetStarterPackBuilder<'a, S>
where
    S: get_starter_pack_state::State,
    S::StarterPack: get_starter_pack_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> GetStarterPack<'a> {
        GetStarterPack {
            starter_pack: self.__unsafe_private_named.0.unwrap(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetStarterPackOutput<'a> {
    #[serde(borrow)]
    pub starter_pack: crate::app_bsky::graph::StarterPackView<'a>,
}

/// Response type for
///app.bsky.graph.getStarterPack
pub struct GetStarterPackResponse;
impl jacquard_common::xrpc::XrpcResp for GetStarterPackResponse {
    const NSID: &'static str = "app.bsky.graph.getStarterPack";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetStarterPackOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetStarterPack<'a> {
    const NSID: &'static str = "app.bsky.graph.getStarterPack";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetStarterPackResponse;
}

/// Endpoint type for
///app.bsky.graph.getStarterPack
pub struct GetStarterPackRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetStarterPackRequest {
    const PATH: &'static str = "/xrpc/app.bsky.graph.getStarterPack";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetStarterPack<'de>;
    type Response = GetStarterPackResponse;
}