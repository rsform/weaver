// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getPopularFeedGenerators
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetPopularFeedGenerators<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub query: std::option::Option<jacquard_common::CowStr<'a>>,
}

pub mod get_popular_feed_generators_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {}
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {}
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {}
}

/// Builder for constructing an instance of this type
pub struct GetPopularFeedGeneratorsBuilder<
    'a,
    S: get_popular_feed_generators_state::State,
> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<i64>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> GetPopularFeedGenerators<'a> {
    /// Create a new builder for this type
    pub fn new() -> GetPopularFeedGeneratorsBuilder<
        'a,
        get_popular_feed_generators_state::Empty,
    > {
        GetPopularFeedGeneratorsBuilder::new()
    }
}

impl<'a> GetPopularFeedGeneratorsBuilder<'a, get_popular_feed_generators_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        GetPopularFeedGeneratorsBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<
    'a,
    S: get_popular_feed_generators_state::State,
> GetPopularFeedGeneratorsBuilder<'a, S> {
    /// Set the `cursor` field (optional)
    pub fn cursor(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `cursor` field to an Option value (optional)
    pub fn maybe_cursor(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<
    'a,
    S: get_popular_feed_generators_state::State,
> GetPopularFeedGeneratorsBuilder<'a, S> {
    /// Set the `limit` field (optional)
    pub fn limit(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `limit` field to an Option value (optional)
    pub fn maybe_limit(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<
    'a,
    S: get_popular_feed_generators_state::State,
> GetPopularFeedGeneratorsBuilder<'a, S> {
    /// Set the `query` field (optional)
    pub fn query(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.2 = value.into();
        self
    }
    /// Set the `query` field to an Option value (optional)
    pub fn maybe_query(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.2 = value;
        self
    }
}

impl<'a, S> GetPopularFeedGeneratorsBuilder<'a, S>
where
    S: get_popular_feed_generators_state::State,
{
    /// Build the final struct
    pub fn build(self) -> GetPopularFeedGenerators<'a> {
        GetPopularFeedGenerators {
            cursor: self.__unsafe_private_named.0,
            limit: self.__unsafe_private_named.1,
            query: self.__unsafe_private_named.2,
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetPopularFeedGeneratorsOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub feeds: Vec<crate::app_bsky::feed::GeneratorView<'a>>,
}

/// Response type for
///app.bsky.unspecced.getPopularFeedGenerators
pub struct GetPopularFeedGeneratorsResponse;
impl jacquard_common::xrpc::XrpcResp for GetPopularFeedGeneratorsResponse {
    const NSID: &'static str = "app.bsky.unspecced.getPopularFeedGenerators";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetPopularFeedGeneratorsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetPopularFeedGenerators<'a> {
    const NSID: &'static str = "app.bsky.unspecced.getPopularFeedGenerators";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetPopularFeedGeneratorsResponse;
}

/// Endpoint type for
///app.bsky.unspecced.getPopularFeedGenerators
pub struct GetPopularFeedGeneratorsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetPopularFeedGeneratorsRequest {
    const PATH: &'static str = "/xrpc/app.bsky.unspecced.getPopularFeedGenerators";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetPopularFeedGenerators<'de>;
    type Response = GetPopularFeedGeneratorsResponse;
}