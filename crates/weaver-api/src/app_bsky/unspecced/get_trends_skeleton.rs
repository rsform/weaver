// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getTrendsSkeleton
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetTrendsSkeleton<'a> {
    ///(default: 10, min: 1, max: 25)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub viewer: std::option::Option<jacquard_common::types::string::Did<'a>>,
}

pub mod get_trends_skeleton_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {}
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {}
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {}
}

/// Builder for constructing an instance of this type
pub struct GetTrendsSkeletonBuilder<'a, S: get_trends_skeleton_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<i64>,
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> GetTrendsSkeleton<'a> {
    /// Create a new builder for this type
    pub fn new() -> GetTrendsSkeletonBuilder<'a, get_trends_skeleton_state::Empty> {
        GetTrendsSkeletonBuilder::new()
    }
}

impl<'a> GetTrendsSkeletonBuilder<'a, get_trends_skeleton_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        GetTrendsSkeletonBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: get_trends_skeleton_state::State> GetTrendsSkeletonBuilder<'a, S> {
    /// Set the `limit` field (optional)
    pub fn limit(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `limit` field to an Option value (optional)
    pub fn maybe_limit(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<'a, S: get_trends_skeleton_state::State> GetTrendsSkeletonBuilder<'a, S> {
    /// Set the `viewer` field (optional)
    pub fn viewer(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Did<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `viewer` field to an Option value (optional)
    pub fn maybe_viewer(
        mut self,
        value: Option<jacquard_common::types::string::Did<'a>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S> GetTrendsSkeletonBuilder<'a, S>
where
    S: get_trends_skeleton_state::State,
{
    /// Build the final struct
    pub fn build(self) -> GetTrendsSkeleton<'a> {
        GetTrendsSkeleton {
            limit: self.__unsafe_private_named.0,
            viewer: self.__unsafe_private_named.1,
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetTrendsSkeletonOutput<'a> {
    #[serde(borrow)]
    pub trends: Vec<crate::app_bsky::unspecced::SkeletonTrend<'a>>,
}

/// Response type for
///app.bsky.unspecced.getTrendsSkeleton
pub struct GetTrendsSkeletonResponse;
impl jacquard_common::xrpc::XrpcResp for GetTrendsSkeletonResponse {
    const NSID: &'static str = "app.bsky.unspecced.getTrendsSkeleton";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetTrendsSkeletonOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetTrendsSkeleton<'a> {
    const NSID: &'static str = "app.bsky.unspecced.getTrendsSkeleton";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetTrendsSkeletonResponse;
}

/// Endpoint type for
///app.bsky.unspecced.getTrendsSkeleton
pub struct GetTrendsSkeletonRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetTrendsSkeletonRequest {
    const PATH: &'static str = "/xrpc/app.bsky.unspecced.getTrendsSkeleton";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetTrendsSkeleton<'de>;
    type Response = GetTrendsSkeletonResponse;
}