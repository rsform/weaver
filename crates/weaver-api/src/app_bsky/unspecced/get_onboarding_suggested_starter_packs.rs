// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getOnboardingSuggestedStarterPacks
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetOnboardingSuggestedStarterPacks {
    ///(default: 10, min: 1, max: 25)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
}

pub mod get_onboarding_suggested_starter_packs_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {}
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {}
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {}
}

/// Builder for constructing an instance of this type
pub struct GetOnboardingSuggestedStarterPacksBuilder<
    S: get_onboarding_suggested_starter_packs_state::State,
> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (::core::option::Option<i64>,),
}

impl GetOnboardingSuggestedStarterPacks {
    /// Create a new builder for this type
    pub fn new() -> GetOnboardingSuggestedStarterPacksBuilder<
        get_onboarding_suggested_starter_packs_state::Empty,
    > {
        GetOnboardingSuggestedStarterPacksBuilder::new()
    }
}

impl GetOnboardingSuggestedStarterPacksBuilder<
    get_onboarding_suggested_starter_packs_state::Empty,
> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        GetOnboardingSuggestedStarterPacksBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None,),
        }
    }
}

impl<
    S: get_onboarding_suggested_starter_packs_state::State,
> GetOnboardingSuggestedStarterPacksBuilder<S> {
    /// Set the `limit` field (optional)
    pub fn limit(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `limit` field to an Option value (optional)
    pub fn maybe_limit(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<S> GetOnboardingSuggestedStarterPacksBuilder<S>
where
    S: get_onboarding_suggested_starter_packs_state::State,
{
    /// Build the final struct
    pub fn build(self) -> GetOnboardingSuggestedStarterPacks {
        GetOnboardingSuggestedStarterPacks {
            limit: self.__unsafe_private_named.0,
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetOnboardingSuggestedStarterPacksOutput<'a> {
    #[serde(borrow)]
    pub starter_packs: Vec<crate::app_bsky::graph::StarterPackView<'a>>,
}

/// Response type for
///app.bsky.unspecced.getOnboardingSuggestedStarterPacks
pub struct GetOnboardingSuggestedStarterPacksResponse;
impl jacquard_common::xrpc::XrpcResp for GetOnboardingSuggestedStarterPacksResponse {
    const NSID: &'static str = "app.bsky.unspecced.getOnboardingSuggestedStarterPacks";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetOnboardingSuggestedStarterPacksOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl jacquard_common::xrpc::XrpcRequest for GetOnboardingSuggestedStarterPacks {
    const NSID: &'static str = "app.bsky.unspecced.getOnboardingSuggestedStarterPacks";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetOnboardingSuggestedStarterPacksResponse;
}

/// Endpoint type for
///app.bsky.unspecced.getOnboardingSuggestedStarterPacks
pub struct GetOnboardingSuggestedStarterPacksRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetOnboardingSuggestedStarterPacksRequest {
    const PATH: &'static str = "/xrpc/app.bsky.unspecced.getOnboardingSuggestedStarterPacks";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetOnboardingSuggestedStarterPacks;
    type Response = GetOnboardingSuggestedStarterPacksResponse;
}