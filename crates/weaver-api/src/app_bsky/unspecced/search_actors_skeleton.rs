// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.searchActorsSkeleton
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SearchActorsSkeleton<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 25, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(borrow)]
    pub q: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub typeahead: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub viewer: std::option::Option<jacquard_common::types::string::Did<'a>>,
}

pub mod search_actors_skeleton_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Q;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Q = Unset;
    }
    ///State transition - sets the `q` field to Set
    pub struct SetQ<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetQ<S> {}
    impl<S: State> State for SetQ<S> {
        type Q = Set<members::q>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `q` field
        pub struct q(());
    }
}

/// Builder for constructing an instance of this type
pub struct SearchActorsSkeletonBuilder<'a, S: search_actors_skeleton_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<i64>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<bool>,
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> SearchActorsSkeleton<'a> {
    /// Create a new builder for this type
    pub fn new() -> SearchActorsSkeletonBuilder<
        'a,
        search_actors_skeleton_state::Empty,
    > {
        SearchActorsSkeletonBuilder::new()
    }
}

impl<'a> SearchActorsSkeletonBuilder<'a, search_actors_skeleton_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        SearchActorsSkeletonBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: search_actors_skeleton_state::State> SearchActorsSkeletonBuilder<'a, S> {
    /// Set the `cursor` field (optional)
    pub fn cursor(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `cursor` field to an Option value (optional)
    pub fn maybe_cursor(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<'a, S: search_actors_skeleton_state::State> SearchActorsSkeletonBuilder<'a, S> {
    /// Set the `limit` field (optional)
    pub fn limit(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `limit` field to an Option value (optional)
    pub fn maybe_limit(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S> SearchActorsSkeletonBuilder<'a, S>
where
    S: search_actors_skeleton_state::State,
    S::Q: search_actors_skeleton_state::IsUnset,
{
    /// Set the `q` field (required)
    pub fn q(
        mut self,
        value: impl Into<jacquard_common::CowStr<'a>>,
    ) -> SearchActorsSkeletonBuilder<'a, search_actors_skeleton_state::SetQ<S>> {
        self.__unsafe_private_named.2 = ::core::option::Option::Some(value.into());
        SearchActorsSkeletonBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: search_actors_skeleton_state::State> SearchActorsSkeletonBuilder<'a, S> {
    /// Set the `typeahead` field (optional)
    pub fn typeahead(mut self, value: impl Into<Option<bool>>) -> Self {
        self.__unsafe_private_named.3 = value.into();
        self
    }
    /// Set the `typeahead` field to an Option value (optional)
    pub fn maybe_typeahead(mut self, value: Option<bool>) -> Self {
        self.__unsafe_private_named.3 = value;
        self
    }
}

impl<'a, S: search_actors_skeleton_state::State> SearchActorsSkeletonBuilder<'a, S> {
    /// Set the `viewer` field (optional)
    pub fn viewer(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Did<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value.into();
        self
    }
    /// Set the `viewer` field to an Option value (optional)
    pub fn maybe_viewer(
        mut self,
        value: Option<jacquard_common::types::string::Did<'a>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value;
        self
    }
}

impl<'a, S> SearchActorsSkeletonBuilder<'a, S>
where
    S: search_actors_skeleton_state::State,
    S::Q: search_actors_skeleton_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> SearchActorsSkeleton<'a> {
        SearchActorsSkeleton {
            cursor: self.__unsafe_private_named.0,
            limit: self.__unsafe_private_named.1,
            q: self.__unsafe_private_named.2.unwrap(),
            typeahead: self.__unsafe_private_named.3,
            viewer: self.__unsafe_private_named.4,
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SearchActorsSkeletonOutput<'a> {
    #[serde(borrow)]
    pub actors: Vec<crate::app_bsky::unspecced::SkeletonSearchActor<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hits_total: std::option::Option<i64>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum SearchActorsSkeletonError<'a> {
    #[serde(rename = "BadQueryString")]
    BadQueryString(std::option::Option<String>),
}

impl std::fmt::Display for SearchActorsSkeletonError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::BadQueryString(msg) => {
                write!(f, "BadQueryString")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// Response type for
///app.bsky.unspecced.searchActorsSkeleton
pub struct SearchActorsSkeletonResponse;
impl jacquard_common::xrpc::XrpcResp for SearchActorsSkeletonResponse {
    const NSID: &'static str = "app.bsky.unspecced.searchActorsSkeleton";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = SearchActorsSkeletonOutput<'de>;
    type Err<'de> = SearchActorsSkeletonError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for SearchActorsSkeleton<'a> {
    const NSID: &'static str = "app.bsky.unspecced.searchActorsSkeleton";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = SearchActorsSkeletonResponse;
}

/// Endpoint type for
///app.bsky.unspecced.searchActorsSkeleton
pub struct SearchActorsSkeletonRequest;
impl jacquard_common::xrpc::XrpcEndpoint for SearchActorsSkeletonRequest {
    const PATH: &'static str = "/xrpc/app.bsky.unspecced.searchActorsSkeleton";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = SearchActorsSkeleton<'de>;
    type Response = SearchActorsSkeletonResponse;
}