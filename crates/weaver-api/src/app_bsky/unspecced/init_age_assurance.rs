// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.initAgeAssurance
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct InitAgeAssurance<'a> {
    /// An ISO 3166-1 alpha-2 code of the user's location.
    #[serde(borrow)]
    pub country_code: jacquard_common::CowStr<'a>,
    /// The user's email address to receive assurance instructions.
    #[serde(borrow)]
    pub email: jacquard_common::CowStr<'a>,
    /// The user's preferred language for communication during the assurance process.
    #[serde(borrow)]
    pub language: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct InitAgeAssuranceOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::app_bsky::unspecced::AgeAssuranceState<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum InitAgeAssuranceError<'a> {
    #[serde(rename = "InvalidEmail")]
    InvalidEmail(std::option::Option<String>),
    #[serde(rename = "DidTooLong")]
    DidTooLong(std::option::Option<String>),
    #[serde(rename = "InvalidInitiation")]
    InvalidInitiation(std::option::Option<String>),
}

impl std::fmt::Display for InitAgeAssuranceError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::InvalidEmail(msg) => {
                write!(f, "InvalidEmail")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::DidTooLong(msg) => {
                write!(f, "DidTooLong")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::InvalidInitiation(msg) => {
                write!(f, "InvalidInitiation")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// Response type for
///app.bsky.unspecced.initAgeAssurance
pub struct InitAgeAssuranceResponse;
impl jacquard_common::xrpc::XrpcResp for InitAgeAssuranceResponse {
    const NSID: &'static str = "app.bsky.unspecced.initAgeAssurance";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = InitAgeAssuranceOutput<'de>;
    type Err<'de> = InitAgeAssuranceError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for InitAgeAssurance<'a> {
    const NSID: &'static str = "app.bsky.unspecced.initAgeAssurance";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = InitAgeAssuranceResponse;
}

/// Endpoint type for
///app.bsky.unspecced.initAgeAssurance
pub struct InitAgeAssuranceRequest;
impl jacquard_common::xrpc::XrpcEndpoint for InitAgeAssuranceRequest {
    const PATH: &'static str = "/xrpc/app.bsky.unspecced.initAgeAssurance";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = InitAgeAssurance<'de>;
    type Response = InitAgeAssuranceResponse;
}