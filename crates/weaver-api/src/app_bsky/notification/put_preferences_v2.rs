// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.notification.putPreferencesV2
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct PutPreferencesV2<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub chat: std::option::Option<crate::app_bsky::notification::ChatPreference<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub follow: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub like: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub like_via_repost: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub mention: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub quote: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reply: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub repost: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub repost_via_repost: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub starterpack_joined: std::option::Option<
        crate::app_bsky::notification::Preference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subscribed_post: std::option::Option<
        crate::app_bsky::notification::Preference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub unverified: std::option::Option<crate::app_bsky::notification::Preference<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub verified: std::option::Option<crate::app_bsky::notification::Preference<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PutPreferencesV2Output<'a> {
    #[serde(borrow)]
    pub preferences: crate::app_bsky::notification::Preferences<'a>,
}

/// Response type for
///app.bsky.notification.putPreferencesV2
pub struct PutPreferencesV2Response;
impl jacquard_common::xrpc::XrpcResp for PutPreferencesV2Response {
    const NSID: &'static str = "app.bsky.notification.putPreferencesV2";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = PutPreferencesV2Output<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for PutPreferencesV2<'a> {
    const NSID: &'static str = "app.bsky.notification.putPreferencesV2";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = PutPreferencesV2Response;
}

/// Endpoint type for
///app.bsky.notification.putPreferencesV2
pub struct PutPreferencesV2Request;
impl jacquard_common::xrpc::XrpcEndpoint for PutPreferencesV2Request {
    const PATH: &'static str = "/xrpc/app.bsky.notification.putPreferencesV2";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = PutPreferencesV2<'de>;
    type Response = PutPreferencesV2Response;
}