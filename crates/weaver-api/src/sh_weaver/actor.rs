// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.weaver.actor.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_profile;
pub mod profile;

/// A single author in a Weaver notebook.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Author<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub display_name: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub handle: Option<jacquard_common::types::string::Handle<'a>>,
}

pub mod author_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Did;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Did = Unset;
    }
    ///State transition - sets the `did` field to Set
    pub struct SetDid<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetDid<S> {}
    impl<S: State> State for SetDid<S> {
        type Did = Set<members::did>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `did` field
        pub struct did(());
    }
}

/// Builder for constructing an instance of this type
pub struct AuthorBuilder<'a, S: author_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::types::string::Handle<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> Author<'a> {
    /// Create a new builder for this type
    pub fn new() -> AuthorBuilder<'a, author_state::Empty> {
        AuthorBuilder::new()
    }
}

impl<'a> AuthorBuilder<'a, author_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        AuthorBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> AuthorBuilder<'a, S>
where
    S: author_state::State,
    S::Did: author_state::IsUnset,
{
    /// Set the `did` field (required)
    pub fn did(
        mut self,
        value: impl Into<jacquard_common::types::string::Did<'a>>,
    ) -> AuthorBuilder<'a, author_state::SetDid<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        AuthorBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: author_state::State> AuthorBuilder<'a, S> {
    /// Set the `displayName` field (optional)
    pub fn display_name(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `displayName` field to an Option value (optional)
    pub fn maybe_display_name(
        mut self,
        value: Option<jacquard_common::CowStr<'a>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S: author_state::State> AuthorBuilder<'a, S> {
    /// Set the `handle` field (optional)
    pub fn handle(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Handle<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.2 = value.into();
        self
    }
    /// Set the `handle` field to an Option value (optional)
    pub fn maybe_handle(
        mut self,
        value: Option<jacquard_common::types::string::Handle<'a>>,
    ) -> Self {
        self.__unsafe_private_named.2 = value;
        self
    }
}

impl<'a, S> AuthorBuilder<'a, S>
where
    S: author_state::State,
    S::Did: author_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> Author<'a> {
        Author {
            did: self.__unsafe_private_named.0.unwrap(),
            display_name: self.__unsafe_private_named.1,
            handle: self.__unsafe_private_named.2,
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> Author<'a> {
        Author {
            did: self.__unsafe_private_named.0.unwrap(),
            display_name: self.__unsafe_private_named.1,
            handle: self.__unsafe_private_named.2,
            extra_data: Some(extra_data),
        }
    }
}

fn lexicon_doc_sh_weaver_actor_defs() -> ::jacquard_lexicon::lexicon::LexiconDoc<
    'static,
> {
    ::jacquard_lexicon::lexicon::LexiconDoc {
        lexicon: ::jacquard_lexicon::lexicon::Lexicon::Lexicon1,
        id: ::jacquard_common::CowStr::new_static("sh.weaver.actor.defs"),
        revision: None,
        description: None,
        defs: {
            let mut map = ::std::collections::BTreeMap::new();
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("author"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: Some(
                        ::jacquard_common::CowStr::new_static(
                            "A single author in a Weaver notebook.",
                        ),
                    ),
                    required: Some(
                        vec![::jacquard_common::smol_str::SmolStr::new_static("did")],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("did"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Did,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "displayName",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: Some(640usize),
                                min_graphemes: None,
                                max_graphemes: Some(64usize),
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("handle"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Handle,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map
                    },
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("pinnedList"),
                ::jacquard_lexicon::lexicon::LexUserType::Array(::jacquard_lexicon::lexicon::LexArray {
                    description: None,
                    items: ::jacquard_lexicon::lexicon::LexArrayItem::Ref(::jacquard_lexicon::lexicon::LexRef {
                        description: None,
                        r#ref: ::jacquard_common::CowStr::new_static(
                            "com.atproto.repo.strongRef",
                        ),
                    }),
                    min_length: None,
                    max_length: None,
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("profileDataView"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: None,
                    required: Some(
                        vec![::jacquard_common::smol_str::SmolStr::new_static("inner")],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("inner"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Union(::jacquard_lexicon::lexicon::LexRefUnion {
                                description: None,
                                refs: vec![
                                    ::jacquard_common::CowStr::new_static("#profileView"),
                                    ::jacquard_common::CowStr::new_static("app.bsky.actor.defs#profileViewDetailed"),
                                    ::jacquard_common::CowStr::new_static("#tangledProfileView")
                                ],
                                closed: None,
                            }),
                        );
                        map
                    },
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("profileDataViewBasic"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: None,
                    required: Some(
                        vec![::jacquard_common::smol_str::SmolStr::new_static("inner")],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("inner"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Union(::jacquard_lexicon::lexicon::LexRefUnion {
                                description: None,
                                refs: vec![
                                    ::jacquard_common::CowStr::new_static("#profileViewBasic"),
                                    ::jacquard_common::CowStr::new_static("app.bsky.actor.defs#profileViewBasic"),
                                    ::jacquard_common::CowStr::new_static("#tangledProfileView")
                                ],
                                closed: None,
                            }),
                        );
                        map
                    },
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("profileView"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: None,
                    required: Some(
                        vec![
                            ::jacquard_common::smol_str::SmolStr::new_static("did"),
                            ::jacquard_common::smol_str::SmolStr::new_static("handle")
                        ],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("avatar"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Uri,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("banner"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Uri,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "createdAt",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Datetime,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "description",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: Some(10240usize),
                                min_graphemes: None,
                                max_graphemes: Some(1024usize),
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("did"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Did,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "displayName",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: Some(640usize),
                                min_graphemes: None,
                                max_graphemes: Some(64usize),
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("handle"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Handle,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "indexedAt",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Datetime,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("labels"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Array(::jacquard_lexicon::lexicon::LexArray {
                                description: None,
                                items: ::jacquard_lexicon::lexicon::LexArrayItem::Ref(::jacquard_lexicon::lexicon::LexRef {
                                    description: None,
                                    r#ref: ::jacquard_common::CowStr::new_static(
                                        "com.atproto.label.defs#label",
                                    ),
                                }),
                                min_length: None,
                                max_length: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("links"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Array(::jacquard_lexicon::lexicon::LexArray {
                                description: None,
                                items: ::jacquard_lexicon::lexicon::LexArrayItem::String(::jacquard_lexicon::lexicon::LexString {
                                    description: Some(
                                        ::jacquard_common::CowStr::new_static(
                                            "Any URI, intended for social profiles or websites, can be used to link DIDs/AT-URIs too.",
                                        ),
                                    ),
                                    format: Some(
                                        ::jacquard_lexicon::lexicon::LexStringFormat::Uri,
                                    ),
                                    default: None,
                                    min_length: None,
                                    max_length: None,
                                    min_graphemes: None,
                                    max_graphemes: None,
                                    r#enum: None,
                                    r#const: None,
                                    known_values: None,
                                }),
                                min_length: Some(0usize),
                                max_length: Some(5usize),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("location"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "Free-form location text.",
                                    ),
                                ),
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: Some(400usize),
                                min_graphemes: None,
                                max_graphemes: Some(40usize),
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("pinned"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static("#pinnedList"),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("pronouns"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static(
                                    "#pronounsList",
                                ),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "subscribedCount",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Integer(::jacquard_lexicon::lexicon::LexInteger {
                                description: None,
                                default: None,
                                minimum: None,
                                maximum: None,
                                r#enum: None,
                                r#const: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "subscriberCount",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Integer(::jacquard_lexicon::lexicon::LexInteger {
                                description: None,
                                default: None,
                                minimum: None,
                                maximum: None,
                                r#enum: None,
                                r#const: None,
                            }),
                        );
                        map
                    },
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("profileViewBasic"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: None,
                    required: Some(
                        vec![
                            ::jacquard_common::smol_str::SmolStr::new_static("did"),
                            ::jacquard_common::smol_str::SmolStr::new_static("handle")
                        ],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("avatar"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Uri,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "createdAt",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Datetime,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("did"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Did,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "displayName",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: Some(640usize),
                                min_graphemes: None,
                                max_graphemes: Some(64usize),
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("handle"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Handle,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "indexedAt",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Datetime,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("labels"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Array(::jacquard_lexicon::lexicon::LexArray {
                                description: None,
                                items: ::jacquard_lexicon::lexicon::LexArrayItem::Ref(::jacquard_lexicon::lexicon::LexRef {
                                    description: None,
                                    r#ref: ::jacquard_common::CowStr::new_static(
                                        "com.atproto.label.defs#label",
                                    ),
                                }),
                                min_length: None,
                                max_length: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("pronouns"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static(
                                    "#pronounsList",
                                ),
                            }),
                        );
                        map
                    },
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("pronounsList"),
                ::jacquard_lexicon::lexicon::LexUserType::Array(::jacquard_lexicon::lexicon::LexArray {
                    description: None,
                    items: ::jacquard_lexicon::lexicon::LexArrayItem::String(::jacquard_lexicon::lexicon::LexString {
                        description: None,
                        format: None,
                        default: None,
                        min_length: None,
                        max_length: Some(500usize),
                        min_graphemes: None,
                        max_graphemes: Some(50usize),
                        r#enum: None,
                        r#const: None,
                        known_values: None,
                    }),
                    min_length: None,
                    max_length: Some(5usize),
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("tangledProfileView"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: None,
                    required: Some(
                        vec![
                            ::jacquard_common::smol_str::SmolStr::new_static("bluesky"),
                            ::jacquard_common::smol_str::SmolStr::new_static("did"),
                            ::jacquard_common::smol_str::SmolStr::new_static("handle")
                        ],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("bluesky"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Boolean(::jacquard_lexicon::lexicon::LexBoolean {
                                description: None,
                                default: None,
                                r#const: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "description",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "Free-form profile description text.",
                                    ),
                                ),
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: Some(2560usize),
                                min_graphemes: None,
                                max_graphemes: Some(256usize),
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("did"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Did,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("handle"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Handle,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("links"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Array(::jacquard_lexicon::lexicon::LexArray {
                                description: None,
                                items: ::jacquard_lexicon::lexicon::LexArrayItem::String(::jacquard_lexicon::lexicon::LexString {
                                    description: Some(
                                        ::jacquard_common::CowStr::new_static(
                                            "Any URI, intended for social profiles or websites, can be used to link DIDs/AT-URIs too.",
                                        ),
                                    ),
                                    format: Some(
                                        ::jacquard_lexicon::lexicon::LexStringFormat::Uri,
                                    ),
                                    default: None,
                                    min_length: None,
                                    max_length: None,
                                    min_graphemes: None,
                                    max_graphemes: None,
                                    r#enum: None,
                                    r#const: None,
                                    known_values: None,
                                }),
                                min_length: Some(0usize),
                                max_length: Some(5usize),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("location"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "Free-form location text.",
                                    ),
                                ),
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: Some(400usize),
                                min_graphemes: None,
                                max_graphemes: Some(40usize),
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "pinnedRepositories",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Array(::jacquard_lexicon::lexicon::LexArray {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "Any ATURI, it is up to appviews to validate these fields.",
                                    ),
                                ),
                                items: ::jacquard_lexicon::lexicon::LexArrayItem::String(::jacquard_lexicon::lexicon::LexString {
                                    description: None,
                                    format: Some(
                                        ::jacquard_lexicon::lexicon::LexStringFormat::AtUri,
                                    ),
                                    default: None,
                                    min_length: None,
                                    max_length: None,
                                    min_graphemes: None,
                                    max_graphemes: None,
                                    r#enum: None,
                                    r#const: None,
                                    known_values: None,
                                }),
                                min_length: Some(0usize),
                                max_length: Some(6usize),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("stats"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Array(::jacquard_lexicon::lexicon::LexArray {
                                description: None,
                                items: ::jacquard_lexicon::lexicon::LexArrayItem::String(::jacquard_lexicon::lexicon::LexString {
                                    description: Some(
                                        ::jacquard_common::CowStr::new_static("Vanity stats."),
                                    ),
                                    format: None,
                                    default: None,
                                    min_length: None,
                                    max_length: None,
                                    min_graphemes: None,
                                    max_graphemes: None,
                                    r#enum: None,
                                    r#const: None,
                                    known_values: None,
                                }),
                                min_length: Some(0usize),
                                max_length: Some(2usize),
                            }),
                        );
                        map
                    },
                }),
            );
            map
        },
    }
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for Author<'a> {
    fn nsid() -> &'static str {
        "sh.weaver.actor.defs"
    }
    fn def_name() -> &'static str {
        "author"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_sh_weaver_actor_defs()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        if let Some(ref value) = self.display_name {
            #[allow(unused_comparisons)]
            if <str>::len(value.as_ref()) > 640usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "display_name",
                    ),
                    max: 640usize,
                    actual: <str>::len(value.as_ref()),
                });
            }
        }
        if let Some(ref value) = self.display_name {
            {
                let count = ::unicode_segmentation::UnicodeSegmentation::graphemes(
                        value.as_ref(),
                        true,
                    )
                    .count();
                if count > 64usize {
                    return Err(::jacquard_lexicon::validation::ConstraintError::MaxGraphemes {
                        path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                            "display_name",
                        ),
                        max: 64usize,
                        actual: count,
                    });
                }
            }
        }
        Ok(())
    }
}

pub type PinnedList<'a> = Vec<crate::com_atproto::repo::strong_ref::StrongRef<'a>>;
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileDataView<'a> {
    #[serde(borrow)]
    pub inner: ProfileDataViewInner<'a>,
}

pub mod profile_data_view_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Inner;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Inner = Unset;
    }
    ///State transition - sets the `inner` field to Set
    pub struct SetInner<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetInner<S> {}
    impl<S: State> State for SetInner<S> {
        type Inner = Set<members::inner>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `inner` field
        pub struct inner(());
    }
}

/// Builder for constructing an instance of this type
pub struct ProfileDataViewBuilder<'a, S: profile_data_view_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (::core::option::Option<ProfileDataViewInner<'a>>,),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> ProfileDataView<'a> {
    /// Create a new builder for this type
    pub fn new() -> ProfileDataViewBuilder<'a, profile_data_view_state::Empty> {
        ProfileDataViewBuilder::new()
    }
}

impl<'a> ProfileDataViewBuilder<'a, profile_data_view_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        ProfileDataViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None,),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> ProfileDataViewBuilder<'a, S>
where
    S: profile_data_view_state::State,
    S::Inner: profile_data_view_state::IsUnset,
{
    /// Set the `inner` field (required)
    pub fn inner(
        mut self,
        value: impl Into<ProfileDataViewInner<'a>>,
    ) -> ProfileDataViewBuilder<'a, profile_data_view_state::SetInner<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        ProfileDataViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> ProfileDataViewBuilder<'a, S>
where
    S: profile_data_view_state::State,
    S::Inner: profile_data_view_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> ProfileDataView<'a> {
        ProfileDataView {
            inner: self.__unsafe_private_named.0.unwrap(),
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> ProfileDataView<'a> {
        ProfileDataView {
            inner: self.__unsafe_private_named.0.unwrap(),
            extra_data: Some(extra_data),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ProfileDataViewInner<'a> {
    #[serde(rename = "sh.weaver.actor.defs#profileView")]
    ProfileView(Box<crate::sh_weaver::actor::ProfileView<'a>>),
    #[serde(rename = "app.bsky.actor.defs#profileViewDetailed")]
    ProfileViewDetailed(Box<crate::app_bsky::actor::ProfileViewDetailed<'a>>),
    #[serde(rename = "sh.weaver.actor.defs#tangledProfileView")]
    TangledProfileView(Box<crate::sh_weaver::actor::TangledProfileView<'a>>),
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for ProfileDataView<'a> {
    fn nsid() -> &'static str {
        "sh.weaver.actor.defs"
    }
    fn def_name() -> &'static str {
        "profileDataView"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_sh_weaver_actor_defs()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        Ok(())
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileDataViewBasic<'a> {
    #[serde(borrow)]
    pub inner: ProfileDataViewBasicInner<'a>,
}

pub mod profile_data_view_basic_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Inner;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Inner = Unset;
    }
    ///State transition - sets the `inner` field to Set
    pub struct SetInner<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetInner<S> {}
    impl<S: State> State for SetInner<S> {
        type Inner = Set<members::inner>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `inner` field
        pub struct inner(());
    }
}

/// Builder for constructing an instance of this type
pub struct ProfileDataViewBasicBuilder<'a, S: profile_data_view_basic_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (::core::option::Option<ProfileDataViewBasicInner<'a>>,),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> ProfileDataViewBasic<'a> {
    /// Create a new builder for this type
    pub fn new() -> ProfileDataViewBasicBuilder<
        'a,
        profile_data_view_basic_state::Empty,
    > {
        ProfileDataViewBasicBuilder::new()
    }
}

impl<'a> ProfileDataViewBasicBuilder<'a, profile_data_view_basic_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        ProfileDataViewBasicBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None,),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> ProfileDataViewBasicBuilder<'a, S>
where
    S: profile_data_view_basic_state::State,
    S::Inner: profile_data_view_basic_state::IsUnset,
{
    /// Set the `inner` field (required)
    pub fn inner(
        mut self,
        value: impl Into<ProfileDataViewBasicInner<'a>>,
    ) -> ProfileDataViewBasicBuilder<'a, profile_data_view_basic_state::SetInner<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        ProfileDataViewBasicBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> ProfileDataViewBasicBuilder<'a, S>
where
    S: profile_data_view_basic_state::State,
    S::Inner: profile_data_view_basic_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> ProfileDataViewBasic<'a> {
        ProfileDataViewBasic {
            inner: self.__unsafe_private_named.0.unwrap(),
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> ProfileDataViewBasic<'a> {
        ProfileDataViewBasic {
            inner: self.__unsafe_private_named.0.unwrap(),
            extra_data: Some(extra_data),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ProfileDataViewBasicInner<'a> {
    #[serde(rename = "sh.weaver.actor.defs#profileViewBasic")]
    ProfileViewBasic(Box<crate::sh_weaver::actor::ProfileViewBasic<'a>>),
    #[serde(rename = "app.bsky.actor.defs#profileViewBasic")]
    BskyProfileViewBasic(Box<crate::app_bsky::actor::ProfileViewBasic<'a>>),
    #[serde(rename = "sh.weaver.actor.defs#tangledProfileView")]
    TangledProfileView(Box<crate::sh_weaver::actor::TangledProfileView<'a>>),
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for ProfileDataViewBasic<'a> {
    fn nsid() -> &'static str {
        "sh.weaver.actor.defs"
    }
    fn def_name() -> &'static str {
        "profileDataViewBasic"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_sh_weaver_actor_defs()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        Ok(())
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileView<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub avatar: Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub banner: Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub display_name: Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub indexed_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub labels: Option<Vec<crate::com_atproto::label::Label<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub links: Option<Vec<jacquard_common::types::string::Uri<'a>>>,
    /// Free-form location text.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub location: Option<jacquard_common::CowStr<'a>>,
    /// Notebooks or other records pinned for display.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pinned: Option<crate::sh_weaver::actor::PinnedList<'a>>,
    /// Pronouns to use in user-generated content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pronouns: Option<crate::sh_weaver::actor::PronounsList<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subscribed_count: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subscriber_count: Option<i64>,
}

pub mod profile_view_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Did;
        type Handle;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Did = Unset;
        type Handle = Unset;
    }
    ///State transition - sets the `did` field to Set
    pub struct SetDid<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetDid<S> {}
    impl<S: State> State for SetDid<S> {
        type Did = Set<members::did>;
        type Handle = S::Handle;
    }
    ///State transition - sets the `handle` field to Set
    pub struct SetHandle<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetHandle<S> {}
    impl<S: State> State for SetHandle<S> {
        type Did = S::Did;
        type Handle = Set<members::handle>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `did` field
        pub struct did(());
        ///Marker type for the `handle` field
        pub struct handle(());
    }
}

/// Builder for constructing an instance of this type
pub struct ProfileViewBuilder<'a, S: profile_view_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::string::Uri<'a>>,
        ::core::option::Option<jacquard_common::types::string::Uri<'a>>,
        ::core::option::Option<jacquard_common::types::string::Datetime>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::types::string::Handle<'a>>,
        ::core::option::Option<jacquard_common::types::string::Datetime>,
        ::core::option::Option<Vec<crate::com_atproto::label::Label<'a>>>,
        ::core::option::Option<Vec<jacquard_common::types::string::Uri<'a>>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<crate::sh_weaver::actor::PinnedList<'a>>,
        ::core::option::Option<crate::sh_weaver::actor::PronounsList<'a>>,
        ::core::option::Option<i64>,
        ::core::option::Option<i64>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> ProfileView<'a> {
    /// Create a new builder for this type
    pub fn new() -> ProfileViewBuilder<'a, profile_view_state::Empty> {
        ProfileViewBuilder::new()
    }
}

impl<'a> ProfileViewBuilder<'a, profile_view_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        ProfileViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            ),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `avatar` field (optional)
    pub fn avatar(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Uri<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `avatar` field to an Option value (optional)
    pub fn maybe_avatar(
        mut self,
        value: Option<jacquard_common::types::string::Uri<'a>>,
    ) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `banner` field (optional)
    pub fn banner(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Uri<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `banner` field to an Option value (optional)
    pub fn maybe_banner(
        mut self,
        value: Option<jacquard_common::types::string::Uri<'a>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `createdAt` field (optional)
    pub fn created_at(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Datetime>>,
    ) -> Self {
        self.__unsafe_private_named.2 = value.into();
        self
    }
    /// Set the `createdAt` field to an Option value (optional)
    pub fn maybe_created_at(
        mut self,
        value: Option<jacquard_common::types::string::Datetime>,
    ) -> Self {
        self.__unsafe_private_named.2 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `description` field (optional)
    pub fn description(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.3 = value.into();
        self
    }
    /// Set the `description` field to an Option value (optional)
    pub fn maybe_description(
        mut self,
        value: Option<jacquard_common::CowStr<'a>>,
    ) -> Self {
        self.__unsafe_private_named.3 = value;
        self
    }
}

impl<'a, S> ProfileViewBuilder<'a, S>
where
    S: profile_view_state::State,
    S::Did: profile_view_state::IsUnset,
{
    /// Set the `did` field (required)
    pub fn did(
        mut self,
        value: impl Into<jacquard_common::types::string::Did<'a>>,
    ) -> ProfileViewBuilder<'a, profile_view_state::SetDid<S>> {
        self.__unsafe_private_named.4 = ::core::option::Option::Some(value.into());
        ProfileViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `displayName` field (optional)
    pub fn display_name(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.5 = value.into();
        self
    }
    /// Set the `displayName` field to an Option value (optional)
    pub fn maybe_display_name(
        mut self,
        value: Option<jacquard_common::CowStr<'a>>,
    ) -> Self {
        self.__unsafe_private_named.5 = value;
        self
    }
}

impl<'a, S> ProfileViewBuilder<'a, S>
where
    S: profile_view_state::State,
    S::Handle: profile_view_state::IsUnset,
{
    /// Set the `handle` field (required)
    pub fn handle(
        mut self,
        value: impl Into<jacquard_common::types::string::Handle<'a>>,
    ) -> ProfileViewBuilder<'a, profile_view_state::SetHandle<S>> {
        self.__unsafe_private_named.6 = ::core::option::Option::Some(value.into());
        ProfileViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `indexedAt` field (optional)
    pub fn indexed_at(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Datetime>>,
    ) -> Self {
        self.__unsafe_private_named.7 = value.into();
        self
    }
    /// Set the `indexedAt` field to an Option value (optional)
    pub fn maybe_indexed_at(
        mut self,
        value: Option<jacquard_common::types::string::Datetime>,
    ) -> Self {
        self.__unsafe_private_named.7 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `labels` field (optional)
    pub fn labels(
        mut self,
        value: impl Into<Option<Vec<crate::com_atproto::label::Label<'a>>>>,
    ) -> Self {
        self.__unsafe_private_named.8 = value.into();
        self
    }
    /// Set the `labels` field to an Option value (optional)
    pub fn maybe_labels(
        mut self,
        value: Option<Vec<crate::com_atproto::label::Label<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.8 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `links` field (optional)
    pub fn links(
        mut self,
        value: impl Into<Option<Vec<jacquard_common::types::string::Uri<'a>>>>,
    ) -> Self {
        self.__unsafe_private_named.9 = value.into();
        self
    }
    /// Set the `links` field to an Option value (optional)
    pub fn maybe_links(
        mut self,
        value: Option<Vec<jacquard_common::types::string::Uri<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.9 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `location` field (optional)
    pub fn location(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.10 = value.into();
        self
    }
    /// Set the `location` field to an Option value (optional)
    pub fn maybe_location(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.10 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `pinned` field (optional)
    pub fn pinned(
        mut self,
        value: impl Into<Option<crate::sh_weaver::actor::PinnedList<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.11 = value.into();
        self
    }
    /// Set the `pinned` field to an Option value (optional)
    pub fn maybe_pinned(
        mut self,
        value: Option<crate::sh_weaver::actor::PinnedList<'a>>,
    ) -> Self {
        self.__unsafe_private_named.11 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `pronouns` field (optional)
    pub fn pronouns(
        mut self,
        value: impl Into<Option<crate::sh_weaver::actor::PronounsList<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.12 = value.into();
        self
    }
    /// Set the `pronouns` field to an Option value (optional)
    pub fn maybe_pronouns(
        mut self,
        value: Option<crate::sh_weaver::actor::PronounsList<'a>>,
    ) -> Self {
        self.__unsafe_private_named.12 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `subscribedCount` field (optional)
    pub fn subscribed_count(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.13 = value.into();
        self
    }
    /// Set the `subscribedCount` field to an Option value (optional)
    pub fn maybe_subscribed_count(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.13 = value;
        self
    }
}

impl<'a, S: profile_view_state::State> ProfileViewBuilder<'a, S> {
    /// Set the `subscriberCount` field (optional)
    pub fn subscriber_count(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.14 = value.into();
        self
    }
    /// Set the `subscriberCount` field to an Option value (optional)
    pub fn maybe_subscriber_count(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.14 = value;
        self
    }
}

impl<'a, S> ProfileViewBuilder<'a, S>
where
    S: profile_view_state::State,
    S::Did: profile_view_state::IsSet,
    S::Handle: profile_view_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> ProfileView<'a> {
        ProfileView {
            avatar: self.__unsafe_private_named.0,
            banner: self.__unsafe_private_named.1,
            created_at: self.__unsafe_private_named.2,
            description: self.__unsafe_private_named.3,
            did: self.__unsafe_private_named.4.unwrap(),
            display_name: self.__unsafe_private_named.5,
            handle: self.__unsafe_private_named.6.unwrap(),
            indexed_at: self.__unsafe_private_named.7,
            labels: self.__unsafe_private_named.8,
            links: self.__unsafe_private_named.9,
            location: self.__unsafe_private_named.10,
            pinned: self.__unsafe_private_named.11,
            pronouns: self.__unsafe_private_named.12,
            subscribed_count: self.__unsafe_private_named.13,
            subscriber_count: self.__unsafe_private_named.14,
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> ProfileView<'a> {
        ProfileView {
            avatar: self.__unsafe_private_named.0,
            banner: self.__unsafe_private_named.1,
            created_at: self.__unsafe_private_named.2,
            description: self.__unsafe_private_named.3,
            did: self.__unsafe_private_named.4.unwrap(),
            display_name: self.__unsafe_private_named.5,
            handle: self.__unsafe_private_named.6.unwrap(),
            indexed_at: self.__unsafe_private_named.7,
            labels: self.__unsafe_private_named.8,
            links: self.__unsafe_private_named.9,
            location: self.__unsafe_private_named.10,
            pinned: self.__unsafe_private_named.11,
            pronouns: self.__unsafe_private_named.12,
            subscribed_count: self.__unsafe_private_named.13,
            subscriber_count: self.__unsafe_private_named.14,
            extra_data: Some(extra_data),
        }
    }
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for ProfileView<'a> {
    fn nsid() -> &'static str {
        "sh.weaver.actor.defs"
    }
    fn def_name() -> &'static str {
        "profileView"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_sh_weaver_actor_defs()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        if let Some(ref value) = self.description {
            #[allow(unused_comparisons)]
            if <str>::len(value.as_ref()) > 10240usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "description",
                    ),
                    max: 10240usize,
                    actual: <str>::len(value.as_ref()),
                });
            }
        }
        if let Some(ref value) = self.description {
            {
                let count = ::unicode_segmentation::UnicodeSegmentation::graphemes(
                        value.as_ref(),
                        true,
                    )
                    .count();
                if count > 1024usize {
                    return Err(::jacquard_lexicon::validation::ConstraintError::MaxGraphemes {
                        path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                            "description",
                        ),
                        max: 1024usize,
                        actual: count,
                    });
                }
            }
        }
        if let Some(ref value) = self.display_name {
            #[allow(unused_comparisons)]
            if <str>::len(value.as_ref()) > 640usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "display_name",
                    ),
                    max: 640usize,
                    actual: <str>::len(value.as_ref()),
                });
            }
        }
        if let Some(ref value) = self.display_name {
            {
                let count = ::unicode_segmentation::UnicodeSegmentation::graphemes(
                        value.as_ref(),
                        true,
                    )
                    .count();
                if count > 64usize {
                    return Err(::jacquard_lexicon::validation::ConstraintError::MaxGraphemes {
                        path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                            "display_name",
                        ),
                        max: 64usize,
                        actual: count,
                    });
                }
            }
        }
        if let Some(ref value) = self.links {
            #[allow(unused_comparisons)]
            if value.len() > 5usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "links",
                    ),
                    max: 5usize,
                    actual: value.len(),
                });
            }
        }
        if let Some(ref value) = self.links {
            #[allow(unused_comparisons)]
            if value.len() < 0usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MinLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "links",
                    ),
                    min: 0usize,
                    actual: value.len(),
                });
            }
        }
        if let Some(ref value) = self.location {
            #[allow(unused_comparisons)]
            if <str>::len(value.as_ref()) > 400usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "location",
                    ),
                    max: 400usize,
                    actual: <str>::len(value.as_ref()),
                });
            }
        }
        if let Some(ref value) = self.location {
            {
                let count = ::unicode_segmentation::UnicodeSegmentation::graphemes(
                        value.as_ref(),
                        true,
                    )
                    .count();
                if count > 40usize {
                    return Err(::jacquard_lexicon::validation::ConstraintError::MaxGraphemes {
                        path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                            "location",
                        ),
                        max: 40usize,
                        actual: count,
                    });
                }
            }
        }
        Ok(())
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileViewBasic<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub avatar: Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub display_name: Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub indexed_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub labels: Option<Vec<crate::com_atproto::label::Label<'a>>>,
    /// Pronouns to use in user-generated content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pronouns: Option<crate::sh_weaver::actor::PronounsList<'a>>,
}

pub mod profile_view_basic_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Did;
        type Handle;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Did = Unset;
        type Handle = Unset;
    }
    ///State transition - sets the `did` field to Set
    pub struct SetDid<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetDid<S> {}
    impl<S: State> State for SetDid<S> {
        type Did = Set<members::did>;
        type Handle = S::Handle;
    }
    ///State transition - sets the `handle` field to Set
    pub struct SetHandle<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetHandle<S> {}
    impl<S: State> State for SetHandle<S> {
        type Did = S::Did;
        type Handle = Set<members::handle>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `did` field
        pub struct did(());
        ///Marker type for the `handle` field
        pub struct handle(());
    }
}

/// Builder for constructing an instance of this type
pub struct ProfileViewBasicBuilder<'a, S: profile_view_basic_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::string::Uri<'a>>,
        ::core::option::Option<jacquard_common::types::string::Datetime>,
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::types::string::Handle<'a>>,
        ::core::option::Option<jacquard_common::types::string::Datetime>,
        ::core::option::Option<Vec<crate::com_atproto::label::Label<'a>>>,
        ::core::option::Option<crate::sh_weaver::actor::PronounsList<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> ProfileViewBasic<'a> {
    /// Create a new builder for this type
    pub fn new() -> ProfileViewBasicBuilder<'a, profile_view_basic_state::Empty> {
        ProfileViewBasicBuilder::new()
    }
}

impl<'a> ProfileViewBasicBuilder<'a, profile_view_basic_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        ProfileViewBasicBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None, None, None, None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: profile_view_basic_state::State> ProfileViewBasicBuilder<'a, S> {
    /// Set the `avatar` field (optional)
    pub fn avatar(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Uri<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `avatar` field to an Option value (optional)
    pub fn maybe_avatar(
        mut self,
        value: Option<jacquard_common::types::string::Uri<'a>>,
    ) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<'a, S: profile_view_basic_state::State> ProfileViewBasicBuilder<'a, S> {
    /// Set the `createdAt` field (optional)
    pub fn created_at(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Datetime>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `createdAt` field to an Option value (optional)
    pub fn maybe_created_at(
        mut self,
        value: Option<jacquard_common::types::string::Datetime>,
    ) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S> ProfileViewBasicBuilder<'a, S>
where
    S: profile_view_basic_state::State,
    S::Did: profile_view_basic_state::IsUnset,
{
    /// Set the `did` field (required)
    pub fn did(
        mut self,
        value: impl Into<jacquard_common::types::string::Did<'a>>,
    ) -> ProfileViewBasicBuilder<'a, profile_view_basic_state::SetDid<S>> {
        self.__unsafe_private_named.2 = ::core::option::Option::Some(value.into());
        ProfileViewBasicBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: profile_view_basic_state::State> ProfileViewBasicBuilder<'a, S> {
    /// Set the `displayName` field (optional)
    pub fn display_name(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.3 = value.into();
        self
    }
    /// Set the `displayName` field to an Option value (optional)
    pub fn maybe_display_name(
        mut self,
        value: Option<jacquard_common::CowStr<'a>>,
    ) -> Self {
        self.__unsafe_private_named.3 = value;
        self
    }
}

impl<'a, S> ProfileViewBasicBuilder<'a, S>
where
    S: profile_view_basic_state::State,
    S::Handle: profile_view_basic_state::IsUnset,
{
    /// Set the `handle` field (required)
    pub fn handle(
        mut self,
        value: impl Into<jacquard_common::types::string::Handle<'a>>,
    ) -> ProfileViewBasicBuilder<'a, profile_view_basic_state::SetHandle<S>> {
        self.__unsafe_private_named.4 = ::core::option::Option::Some(value.into());
        ProfileViewBasicBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: profile_view_basic_state::State> ProfileViewBasicBuilder<'a, S> {
    /// Set the `indexedAt` field (optional)
    pub fn indexed_at(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Datetime>>,
    ) -> Self {
        self.__unsafe_private_named.5 = value.into();
        self
    }
    /// Set the `indexedAt` field to an Option value (optional)
    pub fn maybe_indexed_at(
        mut self,
        value: Option<jacquard_common::types::string::Datetime>,
    ) -> Self {
        self.__unsafe_private_named.5 = value;
        self
    }
}

impl<'a, S: profile_view_basic_state::State> ProfileViewBasicBuilder<'a, S> {
    /// Set the `labels` field (optional)
    pub fn labels(
        mut self,
        value: impl Into<Option<Vec<crate::com_atproto::label::Label<'a>>>>,
    ) -> Self {
        self.__unsafe_private_named.6 = value.into();
        self
    }
    /// Set the `labels` field to an Option value (optional)
    pub fn maybe_labels(
        mut self,
        value: Option<Vec<crate::com_atproto::label::Label<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.6 = value;
        self
    }
}

impl<'a, S: profile_view_basic_state::State> ProfileViewBasicBuilder<'a, S> {
    /// Set the `pronouns` field (optional)
    pub fn pronouns(
        mut self,
        value: impl Into<Option<crate::sh_weaver::actor::PronounsList<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.7 = value.into();
        self
    }
    /// Set the `pronouns` field to an Option value (optional)
    pub fn maybe_pronouns(
        mut self,
        value: Option<crate::sh_weaver::actor::PronounsList<'a>>,
    ) -> Self {
        self.__unsafe_private_named.7 = value;
        self
    }
}

impl<'a, S> ProfileViewBasicBuilder<'a, S>
where
    S: profile_view_basic_state::State,
    S::Did: profile_view_basic_state::IsSet,
    S::Handle: profile_view_basic_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> ProfileViewBasic<'a> {
        ProfileViewBasic {
            avatar: self.__unsafe_private_named.0,
            created_at: self.__unsafe_private_named.1,
            did: self.__unsafe_private_named.2.unwrap(),
            display_name: self.__unsafe_private_named.3,
            handle: self.__unsafe_private_named.4.unwrap(),
            indexed_at: self.__unsafe_private_named.5,
            labels: self.__unsafe_private_named.6,
            pronouns: self.__unsafe_private_named.7,
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> ProfileViewBasic<'a> {
        ProfileViewBasic {
            avatar: self.__unsafe_private_named.0,
            created_at: self.__unsafe_private_named.1,
            did: self.__unsafe_private_named.2.unwrap(),
            display_name: self.__unsafe_private_named.3,
            handle: self.__unsafe_private_named.4.unwrap(),
            indexed_at: self.__unsafe_private_named.5,
            labels: self.__unsafe_private_named.6,
            pronouns: self.__unsafe_private_named.7,
            extra_data: Some(extra_data),
        }
    }
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for ProfileViewBasic<'a> {
    fn nsid() -> &'static str {
        "sh.weaver.actor.defs"
    }
    fn def_name() -> &'static str {
        "profileViewBasic"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_sh_weaver_actor_defs()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        if let Some(ref value) = self.display_name {
            #[allow(unused_comparisons)]
            if <str>::len(value.as_ref()) > 640usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "display_name",
                    ),
                    max: 640usize,
                    actual: <str>::len(value.as_ref()),
                });
            }
        }
        if let Some(ref value) = self.display_name {
            {
                let count = ::unicode_segmentation::UnicodeSegmentation::graphemes(
                        value.as_ref(),
                        true,
                    )
                    .count();
                if count > 64usize {
                    return Err(::jacquard_lexicon::validation::ConstraintError::MaxGraphemes {
                        path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                            "display_name",
                        ),
                        max: 64usize,
                        actual: count,
                    });
                }
            }
        }
        Ok(())
    }
}

pub type PronounsList<'a> = Vec<jacquard_common::CowStr<'a>>;
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct TangledProfileView<'a> {
    /// Include link to this account on Bluesky.
    pub bluesky: bool,
    /// Free-form profile description text.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub links: Option<Vec<jacquard_common::types::string::Uri<'a>>>,
    /// Free-form location text.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub location: Option<jacquard_common::CowStr<'a>>,
    /// Any ATURI, it is up to appviews to validate these fields.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pinned_repositories: Option<Vec<jacquard_common::types::string::AtUri<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub stats: Option<Vec<jacquard_common::CowStr<'a>>>,
}

pub mod tangled_profile_view_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Bluesky;
        type Did;
        type Handle;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Bluesky = Unset;
        type Did = Unset;
        type Handle = Unset;
    }
    ///State transition - sets the `bluesky` field to Set
    pub struct SetBluesky<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetBluesky<S> {}
    impl<S: State> State for SetBluesky<S> {
        type Bluesky = Set<members::bluesky>;
        type Did = S::Did;
        type Handle = S::Handle;
    }
    ///State transition - sets the `did` field to Set
    pub struct SetDid<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetDid<S> {}
    impl<S: State> State for SetDid<S> {
        type Bluesky = S::Bluesky;
        type Did = Set<members::did>;
        type Handle = S::Handle;
    }
    ///State transition - sets the `handle` field to Set
    pub struct SetHandle<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetHandle<S> {}
    impl<S: State> State for SetHandle<S> {
        type Bluesky = S::Bluesky;
        type Did = S::Did;
        type Handle = Set<members::handle>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `bluesky` field
        pub struct bluesky(());
        ///Marker type for the `did` field
        pub struct did(());
        ///Marker type for the `handle` field
        pub struct handle(());
    }
}

/// Builder for constructing an instance of this type
pub struct TangledProfileViewBuilder<'a, S: tangled_profile_view_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<bool>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
        ::core::option::Option<jacquard_common::types::string::Handle<'a>>,
        ::core::option::Option<Vec<jacquard_common::types::string::Uri<'a>>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<Vec<jacquard_common::types::string::AtUri<'a>>>,
        ::core::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> TangledProfileView<'a> {
    /// Create a new builder for this type
    pub fn new() -> TangledProfileViewBuilder<'a, tangled_profile_view_state::Empty> {
        TangledProfileViewBuilder::new()
    }
}

impl<'a> TangledProfileViewBuilder<'a, tangled_profile_view_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        TangledProfileViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None, None, None, None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> TangledProfileViewBuilder<'a, S>
where
    S: tangled_profile_view_state::State,
    S::Bluesky: tangled_profile_view_state::IsUnset,
{
    /// Set the `bluesky` field (required)
    pub fn bluesky(
        mut self,
        value: impl Into<bool>,
    ) -> TangledProfileViewBuilder<'a, tangled_profile_view_state::SetBluesky<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        TangledProfileViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: tangled_profile_view_state::State> TangledProfileViewBuilder<'a, S> {
    /// Set the `description` field (optional)
    pub fn description(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `description` field to an Option value (optional)
    pub fn maybe_description(
        mut self,
        value: Option<jacquard_common::CowStr<'a>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S> TangledProfileViewBuilder<'a, S>
where
    S: tangled_profile_view_state::State,
    S::Did: tangled_profile_view_state::IsUnset,
{
    /// Set the `did` field (required)
    pub fn did(
        mut self,
        value: impl Into<jacquard_common::types::string::Did<'a>>,
    ) -> TangledProfileViewBuilder<'a, tangled_profile_view_state::SetDid<S>> {
        self.__unsafe_private_named.2 = ::core::option::Option::Some(value.into());
        TangledProfileViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> TangledProfileViewBuilder<'a, S>
where
    S: tangled_profile_view_state::State,
    S::Handle: tangled_profile_view_state::IsUnset,
{
    /// Set the `handle` field (required)
    pub fn handle(
        mut self,
        value: impl Into<jacquard_common::types::string::Handle<'a>>,
    ) -> TangledProfileViewBuilder<'a, tangled_profile_view_state::SetHandle<S>> {
        self.__unsafe_private_named.3 = ::core::option::Option::Some(value.into());
        TangledProfileViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: tangled_profile_view_state::State> TangledProfileViewBuilder<'a, S> {
    /// Set the `links` field (optional)
    pub fn links(
        mut self,
        value: impl Into<Option<Vec<jacquard_common::types::string::Uri<'a>>>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value.into();
        self
    }
    /// Set the `links` field to an Option value (optional)
    pub fn maybe_links(
        mut self,
        value: Option<Vec<jacquard_common::types::string::Uri<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value;
        self
    }
}

impl<'a, S: tangled_profile_view_state::State> TangledProfileViewBuilder<'a, S> {
    /// Set the `location` field (optional)
    pub fn location(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.5 = value.into();
        self
    }
    /// Set the `location` field to an Option value (optional)
    pub fn maybe_location(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.5 = value;
        self
    }
}

impl<'a, S: tangled_profile_view_state::State> TangledProfileViewBuilder<'a, S> {
    /// Set the `pinnedRepositories` field (optional)
    pub fn pinned_repositories(
        mut self,
        value: impl Into<Option<Vec<jacquard_common::types::string::AtUri<'a>>>>,
    ) -> Self {
        self.__unsafe_private_named.6 = value.into();
        self
    }
    /// Set the `pinnedRepositories` field to an Option value (optional)
    pub fn maybe_pinned_repositories(
        mut self,
        value: Option<Vec<jacquard_common::types::string::AtUri<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.6 = value;
        self
    }
}

impl<'a, S: tangled_profile_view_state::State> TangledProfileViewBuilder<'a, S> {
    /// Set the `stats` field (optional)
    pub fn stats(
        mut self,
        value: impl Into<Option<Vec<jacquard_common::CowStr<'a>>>>,
    ) -> Self {
        self.__unsafe_private_named.7 = value.into();
        self
    }
    /// Set the `stats` field to an Option value (optional)
    pub fn maybe_stats(
        mut self,
        value: Option<Vec<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.7 = value;
        self
    }
}

impl<'a, S> TangledProfileViewBuilder<'a, S>
where
    S: tangled_profile_view_state::State,
    S::Bluesky: tangled_profile_view_state::IsSet,
    S::Did: tangled_profile_view_state::IsSet,
    S::Handle: tangled_profile_view_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> TangledProfileView<'a> {
        TangledProfileView {
            bluesky: self.__unsafe_private_named.0.unwrap(),
            description: self.__unsafe_private_named.1,
            did: self.__unsafe_private_named.2.unwrap(),
            handle: self.__unsafe_private_named.3.unwrap(),
            links: self.__unsafe_private_named.4,
            location: self.__unsafe_private_named.5,
            pinned_repositories: self.__unsafe_private_named.6,
            stats: self.__unsafe_private_named.7,
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> TangledProfileView<'a> {
        TangledProfileView {
            bluesky: self.__unsafe_private_named.0.unwrap(),
            description: self.__unsafe_private_named.1,
            did: self.__unsafe_private_named.2.unwrap(),
            handle: self.__unsafe_private_named.3.unwrap(),
            links: self.__unsafe_private_named.4,
            location: self.__unsafe_private_named.5,
            pinned_repositories: self.__unsafe_private_named.6,
            stats: self.__unsafe_private_named.7,
            extra_data: Some(extra_data),
        }
    }
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for TangledProfileView<'a> {
    fn nsid() -> &'static str {
        "sh.weaver.actor.defs"
    }
    fn def_name() -> &'static str {
        "tangledProfileView"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_sh_weaver_actor_defs()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        if let Some(ref value) = self.description {
            #[allow(unused_comparisons)]
            if <str>::len(value.as_ref()) > 2560usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "description",
                    ),
                    max: 2560usize,
                    actual: <str>::len(value.as_ref()),
                });
            }
        }
        if let Some(ref value) = self.description {
            {
                let count = ::unicode_segmentation::UnicodeSegmentation::graphemes(
                        value.as_ref(),
                        true,
                    )
                    .count();
                if count > 256usize {
                    return Err(::jacquard_lexicon::validation::ConstraintError::MaxGraphemes {
                        path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                            "description",
                        ),
                        max: 256usize,
                        actual: count,
                    });
                }
            }
        }
        if let Some(ref value) = self.links {
            #[allow(unused_comparisons)]
            if value.len() > 5usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "links",
                    ),
                    max: 5usize,
                    actual: value.len(),
                });
            }
        }
        if let Some(ref value) = self.links {
            #[allow(unused_comparisons)]
            if value.len() < 0usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MinLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "links",
                    ),
                    min: 0usize,
                    actual: value.len(),
                });
            }
        }
        if let Some(ref value) = self.location {
            #[allow(unused_comparisons)]
            if <str>::len(value.as_ref()) > 400usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "location",
                    ),
                    max: 400usize,
                    actual: <str>::len(value.as_ref()),
                });
            }
        }
        if let Some(ref value) = self.location {
            {
                let count = ::unicode_segmentation::UnicodeSegmentation::graphemes(
                        value.as_ref(),
                        true,
                    )
                    .count();
                if count > 40usize {
                    return Err(::jacquard_lexicon::validation::ConstraintError::MaxGraphemes {
                        path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                            "location",
                        ),
                        max: 40usize,
                        actual: count,
                    });
                }
            }
        }
        if let Some(ref value) = self.pinned_repositories {
            #[allow(unused_comparisons)]
            if value.len() > 6usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "pinned_repositories",
                    ),
                    max: 6usize,
                    actual: value.len(),
                });
            }
        }
        if let Some(ref value) = self.pinned_repositories {
            #[allow(unused_comparisons)]
            if value.len() < 0usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MinLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "pinned_repositories",
                    ),
                    min: 0usize,
                    actual: value.len(),
                });
            }
        }
        if let Some(ref value) = self.stats {
            #[allow(unused_comparisons)]
            if value.len() > 2usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MaxLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "stats",
                    ),
                    max: 2usize,
                    actual: value.len(),
                });
            }
        }
        if let Some(ref value) = self.stats {
            #[allow(unused_comparisons)]
            if value.len() < 0usize {
                return Err(::jacquard_lexicon::validation::ConstraintError::MinLength {
                    path: ::jacquard_lexicon::validation::ValidationPath::from_field(
                        "stats",
                    ),
                    min: 0usize,
                    actual: value.len(),
                });
            }
        }
        Ok(())
    }
}