// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.weaver.embed.recordWithMedia
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct RecordWithMedia<'a> {
    #[serde(borrow)]
    pub media: RecordWithMediaMedia<'a>,
    #[serde(borrow)]
    pub record: RecordWithMediaRecord<'a>,
}

pub mod record_with_media_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Record;
        type Media;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Record = Unset;
        type Media = Unset;
    }
    ///State transition - sets the `record` field to Set
    pub struct SetRecord<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetRecord<S> {}
    impl<S: State> State for SetRecord<S> {
        type Record = Set<members::record>;
        type Media = S::Media;
    }
    ///State transition - sets the `media` field to Set
    pub struct SetMedia<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetMedia<S> {}
    impl<S: State> State for SetMedia<S> {
        type Record = S::Record;
        type Media = Set<members::media>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `record` field
        pub struct record(());
        ///Marker type for the `media` field
        pub struct media(());
    }
}

/// Builder for constructing an instance of this type
pub struct RecordWithMediaBuilder<'a, S: record_with_media_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<RecordWithMediaMedia<'a>>,
        ::core::option::Option<RecordWithMediaRecord<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> RecordWithMedia<'a> {
    /// Create a new builder for this type
    pub fn new() -> RecordWithMediaBuilder<'a, record_with_media_state::Empty> {
        RecordWithMediaBuilder::new()
    }
}

impl<'a> RecordWithMediaBuilder<'a, record_with_media_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        RecordWithMediaBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> RecordWithMediaBuilder<'a, S>
where
    S: record_with_media_state::State,
    S::Media: record_with_media_state::IsUnset,
{
    /// Set the `media` field (required)
    pub fn media(
        mut self,
        value: impl Into<RecordWithMediaMedia<'a>>,
    ) -> RecordWithMediaBuilder<'a, record_with_media_state::SetMedia<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        RecordWithMediaBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> RecordWithMediaBuilder<'a, S>
where
    S: record_with_media_state::State,
    S::Record: record_with_media_state::IsUnset,
{
    /// Set the `record` field (required)
    pub fn record(
        mut self,
        value: impl Into<RecordWithMediaRecord<'a>>,
    ) -> RecordWithMediaBuilder<'a, record_with_media_state::SetRecord<S>> {
        self.__unsafe_private_named.1 = ::core::option::Option::Some(value.into());
        RecordWithMediaBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> RecordWithMediaBuilder<'a, S>
where
    S: record_with_media_state::State,
    S::Record: record_with_media_state::IsSet,
    S::Media: record_with_media_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> RecordWithMedia<'a> {
        RecordWithMedia {
            media: self.__unsafe_private_named.0.unwrap(),
            record: self.__unsafe_private_named.1.unwrap(),
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> RecordWithMedia<'a> {
        RecordWithMedia {
            media: self.__unsafe_private_named.0.unwrap(),
            record: self.__unsafe_private_named.1.unwrap(),
            extra_data: Some(extra_data),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum RecordWithMediaMedia<'a> {
    #[serde(rename = "sh.weaver.embed.images")]
    Images(Box<crate::sh_weaver::embed::images::Images<'a>>),
    #[serde(rename = "sh.weaver.embed.external")]
    External(Box<crate::sh_weaver::embed::external::External<'a>>),
    #[serde(rename = "sh.weaver.embed.video")]
    Video(Box<crate::sh_weaver::embed::video::VideoRecord<'a>>),
    #[serde(rename = "app.bsky.embed.images")]
    BskyImages(Box<crate::app_bsky::embed::images::Images<'a>>),
    #[serde(rename = "app.bsky.embed.video")]
    BskyVideo(Box<crate::app_bsky::embed::video::Video<'a>>),
    #[serde(rename = "app.bsky.embed.external")]
    BskyExternal(Box<crate::app_bsky::embed::external::ExternalRecord<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum RecordWithMediaRecord<'a> {
    #[serde(rename = "app.bsky.embed.record")]
    Record(Box<crate::app_bsky::embed::record::Record<'a>>),
    #[serde(rename = "sh.weaver.embed.records")]
    Records(Box<crate::sh_weaver::embed::records::Records<'a>>),
}

fn lexicon_doc_sh_weaver_embed_recordWithMedia() -> ::jacquard_lexicon::lexicon::LexiconDoc<
    'static,
> {
    ::jacquard_lexicon::lexicon::LexiconDoc {
        lexicon: ::jacquard_lexicon::lexicon::Lexicon::Lexicon1,
        id: ::jacquard_common::CowStr::new_static("sh.weaver.embed.recordWithMedia"),
        revision: None,
        description: None,
        defs: {
            let mut map = ::std::collections::BTreeMap::new();
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("main"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: None,
                    required: Some(
                        vec![
                            ::jacquard_common::smol_str::SmolStr::new_static("record"),
                            ::jacquard_common::smol_str::SmolStr::new_static("media")
                        ],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("media"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Union(::jacquard_lexicon::lexicon::LexRefUnion {
                                description: None,
                                refs: vec![
                                    ::jacquard_common::CowStr::new_static("sh.weaver.embed.images"),
                                    ::jacquard_common::CowStr::new_static("sh.weaver.embed.external"),
                                    ::jacquard_common::CowStr::new_static("sh.weaver.embed.video"),
                                    ::jacquard_common::CowStr::new_static("app.bsky.embed.images"),
                                    ::jacquard_common::CowStr::new_static("app.bsky.embed.video"),
                                    ::jacquard_common::CowStr::new_static("app.bsky.embed.external")
                                ],
                                closed: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("record"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Union(::jacquard_lexicon::lexicon::LexRefUnion {
                                description: None,
                                refs: vec![
                                    ::jacquard_common::CowStr::new_static("app.bsky.embed.record"),
                                    ::jacquard_common::CowStr::new_static("sh.weaver.embed.records")
                                ],
                                closed: None,
                            }),
                        );
                        map
                    },
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("view"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: None,
                    required: Some(
                        vec![
                            ::jacquard_common::smol_str::SmolStr::new_static("record"),
                            ::jacquard_common::smol_str::SmolStr::new_static("media")
                        ],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("media"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Union(::jacquard_lexicon::lexicon::LexRefUnion {
                                description: None,
                                refs: vec![
                                    ::jacquard_common::CowStr::new_static("sh.weaver.embed.images#view"),
                                    ::jacquard_common::CowStr::new_static("sh.weaver.embed.external#view"),
                                    ::jacquard_common::CowStr::new_static("sh.weaver.embed.video#view"),
                                    ::jacquard_common::CowStr::new_static("app.bsky.embed.images#view"),
                                    ::jacquard_common::CowStr::new_static("app.bsky.embed.video#view"),
                                    ::jacquard_common::CowStr::new_static("app.bsky.embed.external#view")
                                ],
                                closed: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("record"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Union(::jacquard_lexicon::lexicon::LexRefUnion {
                                description: None,
                                refs: vec![
                                    ::jacquard_common::CowStr::new_static("sh.weaver.embed.records#view"),
                                    ::jacquard_common::CowStr::new_static("app.bsky.embed.record#view")
                                ],
                                closed: None,
                            }),
                        );
                        map
                    },
                }),
            );
            map
        },
    }
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for RecordWithMedia<'a> {
    fn nsid() -> &'static str {
        "sh.weaver.embed.recordWithMedia"
    }
    fn def_name() -> &'static str {
        "main"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_sh_weaver_embed_recordWithMedia()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        Ok(())
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct View<'a> {
    #[serde(borrow)]
    pub media: ViewMedia<'a>,
    #[serde(borrow)]
    pub record: ViewRecord<'a>,
}

pub mod view_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Record;
        type Media;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Record = Unset;
        type Media = Unset;
    }
    ///State transition - sets the `record` field to Set
    pub struct SetRecord<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetRecord<S> {}
    impl<S: State> State for SetRecord<S> {
        type Record = Set<members::record>;
        type Media = S::Media;
    }
    ///State transition - sets the `media` field to Set
    pub struct SetMedia<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetMedia<S> {}
    impl<S: State> State for SetMedia<S> {
        type Record = S::Record;
        type Media = Set<members::media>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `record` field
        pub struct record(());
        ///Marker type for the `media` field
        pub struct media(());
    }
}

/// Builder for constructing an instance of this type
pub struct ViewBuilder<'a, S: view_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<ViewMedia<'a>>,
        ::core::option::Option<ViewRecord<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> View<'a> {
    /// Create a new builder for this type
    pub fn new() -> ViewBuilder<'a, view_state::Empty> {
        ViewBuilder::new()
    }
}

impl<'a> ViewBuilder<'a, view_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        ViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> ViewBuilder<'a, S>
where
    S: view_state::State,
    S::Media: view_state::IsUnset,
{
    /// Set the `media` field (required)
    pub fn media(
        mut self,
        value: impl Into<ViewMedia<'a>>,
    ) -> ViewBuilder<'a, view_state::SetMedia<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        ViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> ViewBuilder<'a, S>
where
    S: view_state::State,
    S::Record: view_state::IsUnset,
{
    /// Set the `record` field (required)
    pub fn record(
        mut self,
        value: impl Into<ViewRecord<'a>>,
    ) -> ViewBuilder<'a, view_state::SetRecord<S>> {
        self.__unsafe_private_named.1 = ::core::option::Option::Some(value.into());
        ViewBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> ViewBuilder<'a, S>
where
    S: view_state::State,
    S::Record: view_state::IsSet,
    S::Media: view_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> View<'a> {
        View {
            media: self.__unsafe_private_named.0.unwrap(),
            record: self.__unsafe_private_named.1.unwrap(),
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> View<'a> {
        View {
            media: self.__unsafe_private_named.0.unwrap(),
            record: self.__unsafe_private_named.1.unwrap(),
            extra_data: Some(extra_data),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ViewMedia<'a> {
    #[serde(rename = "sh.weaver.embed.images#view")]
    ImagesView(Box<crate::sh_weaver::embed::images::View<'a>>),
    #[serde(rename = "sh.weaver.embed.external#view")]
    ExternalView(Box<crate::sh_weaver::embed::external::View<'a>>),
    #[serde(rename = "sh.weaver.embed.video#view")]
    VideoView(Box<crate::sh_weaver::embed::video::View<'a>>),
    #[serde(rename = "app.bsky.embed.images#view")]
    BskyImagesView(Box<crate::app_bsky::embed::images::View<'a>>),
    #[serde(rename = "app.bsky.embed.video#view")]
    BskyVideoView(Box<crate::app_bsky::embed::video::View<'a>>),
    #[serde(rename = "app.bsky.embed.external#view")]
    BskyExternalView(Box<crate::app_bsky::embed::external::View<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ViewRecord<'a> {
    #[serde(rename = "sh.weaver.embed.records#view")]
    RecordsView(Box<crate::sh_weaver::embed::records::View<'a>>),
    #[serde(rename = "app.bsky.embed.record#view")]
    RecordView(Box<crate::app_bsky::embed::record::View<'a>>),
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for View<'a> {
    fn nsid() -> &'static str {
        "sh.weaver.embed.recordWithMedia"
    }
    fn def_name() -> &'static str {
        "view"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_sh_weaver_embed_recordWithMedia()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        Ok(())
    }
}