// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.weaver.notebook.chapter
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// A grouping of entries in a notebook, intended to be displayed as a single page.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Chapter<'a> {
    /// Client-declared timestamp when this was originally created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(borrow)]
    pub entry_list: Vec<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    /// The notebook this page belongs to.
    #[serde(borrow)]
    pub notebook: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tags: Option<crate::sh_weaver::notebook::Tags<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: Option<crate::sh_weaver::notebook::Title<'a>>,
}

pub mod chapter_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Notebook;
        type Authors;
        type EntryList;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Notebook = Unset;
        type Authors = Unset;
        type EntryList = Unset;
    }
    ///State transition - sets the `notebook` field to Set
    pub struct SetNotebook<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetNotebook<S> {}
    impl<S: State> State for SetNotebook<S> {
        type Notebook = Set<members::notebook>;
        type Authors = S::Authors;
        type EntryList = S::EntryList;
    }
    ///State transition - sets the `authors` field to Set
    pub struct SetAuthors<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetAuthors<S> {}
    impl<S: State> State for SetAuthors<S> {
        type Notebook = S::Notebook;
        type Authors = Set<members::authors>;
        type EntryList = S::EntryList;
    }
    ///State transition - sets the `entry_list` field to Set
    pub struct SetEntryList<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetEntryList<S> {}
    impl<S: State> State for SetEntryList<S> {
        type Notebook = S::Notebook;
        type Authors = S::Authors;
        type EntryList = Set<members::entry_list>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `notebook` field
        pub struct notebook(());
        ///Marker type for the `authors` field
        pub struct authors(());
        ///Marker type for the `entry_list` field
        pub struct entry_list(());
    }
}

/// Builder for constructing an instance of this type
pub struct ChapterBuilder<'a, S: chapter_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::string::Datetime>,
        ::core::option::Option<Vec<crate::com_atproto::repo::strong_ref::StrongRef<'a>>>,
        ::core::option::Option<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
        ::core::option::Option<crate::sh_weaver::notebook::Tags<'a>>,
        ::core::option::Option<crate::sh_weaver::notebook::Title<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> Chapter<'a> {
    /// Create a new builder for this type
    pub fn new() -> ChapterBuilder<'a, chapter_state::Empty> {
        ChapterBuilder::new()
    }
}

impl<'a> ChapterBuilder<'a, chapter_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        ChapterBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: chapter_state::State> ChapterBuilder<'a, S> {
    /// Set the `createdAt` field (optional)
    pub fn created_at(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Datetime>>,
    ) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `createdAt` field to an Option value (optional)
    pub fn maybe_created_at(
        mut self,
        value: Option<jacquard_common::types::string::Datetime>,
    ) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<'a, S> ChapterBuilder<'a, S>
where
    S: chapter_state::State,
    S::EntryList: chapter_state::IsUnset,
{
    /// Set the `entryList` field (required)
    pub fn entry_list(
        mut self,
        value: impl Into<Vec<crate::com_atproto::repo::strong_ref::StrongRef<'a>>>,
    ) -> ChapterBuilder<'a, chapter_state::SetEntryList<S>> {
        self.__unsafe_private_named.1 = ::core::option::Option::Some(value.into());
        ChapterBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> ChapterBuilder<'a, S>
where
    S: chapter_state::State,
    S::Notebook: chapter_state::IsUnset,
{
    /// Set the `notebook` field (required)
    pub fn notebook(
        mut self,
        value: impl Into<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    ) -> ChapterBuilder<'a, chapter_state::SetNotebook<S>> {
        self.__unsafe_private_named.2 = ::core::option::Option::Some(value.into());
        ChapterBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: chapter_state::State> ChapterBuilder<'a, S> {
    /// Set the `tags` field (optional)
    pub fn tags(
        mut self,
        value: impl Into<Option<crate::sh_weaver::notebook::Tags<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.3 = value.into();
        self
    }
    /// Set the `tags` field to an Option value (optional)
    pub fn maybe_tags(
        mut self,
        value: Option<crate::sh_weaver::notebook::Tags<'a>>,
    ) -> Self {
        self.__unsafe_private_named.3 = value;
        self
    }
}

impl<'a, S: chapter_state::State> ChapterBuilder<'a, S> {
    /// Set the `title` field (optional)
    pub fn title(
        mut self,
        value: impl Into<Option<crate::sh_weaver::notebook::Title<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value.into();
        self
    }
    /// Set the `title` field to an Option value (optional)
    pub fn maybe_title(
        mut self,
        value: Option<crate::sh_weaver::notebook::Title<'a>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value;
        self
    }
}

impl<'a, S> ChapterBuilder<'a, S>
where
    S: chapter_state::State,
    S::Notebook: chapter_state::IsSet,
    S::Authors: chapter_state::IsSet,
    S::EntryList: chapter_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> Chapter<'a> {
        Chapter {
            created_at: self.__unsafe_private_named.0,
            entry_list: self.__unsafe_private_named.1.unwrap(),
            notebook: self.__unsafe_private_named.2.unwrap(),
            tags: self.__unsafe_private_named.3,
            title: self.__unsafe_private_named.4,
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> Chapter<'a> {
        Chapter {
            created_at: self.__unsafe_private_named.0,
            entry_list: self.__unsafe_private_named.1.unwrap(),
            notebook: self.__unsafe_private_named.2.unwrap(),
            tags: self.__unsafe_private_named.3,
            title: self.__unsafe_private_named.4,
            extra_data: Some(extra_data),
        }
    }
}

impl<'a> Chapter<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, ChapterRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ChapterGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Chapter<'a>,
}

impl From<ChapterGetRecordOutput<'_>> for Chapter<'_> {
    fn from(output: ChapterGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Chapter<'_> {
    const NSID: &'static str = "sh.weaver.notebook.chapter";
    type Record = ChapterRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct ChapterRecord;
impl jacquard_common::xrpc::XrpcResp for ChapterRecord {
    const NSID: &'static str = "sh.weaver.notebook.chapter";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ChapterGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for ChapterRecord {
    const NSID: &'static str = "sh.weaver.notebook.chapter";
    type Record = ChapterRecord;
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for Chapter<'a> {
    fn nsid() -> &'static str {
        "sh.weaver.notebook.chapter"
    }
    fn def_name() -> &'static str {
        "main"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_sh_weaver_notebook_chapter()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        Ok(())
    }
}

fn lexicon_doc_sh_weaver_notebook_chapter() -> ::jacquard_lexicon::lexicon::LexiconDoc<
    'static,
> {
    ::jacquard_lexicon::lexicon::LexiconDoc {
        lexicon: ::jacquard_lexicon::lexicon::Lexicon::Lexicon1,
        id: ::jacquard_common::CowStr::new_static("sh.weaver.notebook.chapter"),
        revision: None,
        description: None,
        defs: {
            let mut map = ::std::collections::BTreeMap::new();
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("main"),
                ::jacquard_lexicon::lexicon::LexUserType::Record(::jacquard_lexicon::lexicon::LexRecord {
                    description: Some(
                        ::jacquard_common::CowStr::new_static(
                            "A grouping of entries in a notebook, intended to be displayed as a single page.",
                        ),
                    ),
                    key: Some(::jacquard_common::CowStr::new_static("tid")),
                    record: ::jacquard_lexicon::lexicon::LexRecordRecord::Object(::jacquard_lexicon::lexicon::LexObject {
                        description: None,
                        required: Some(
                            vec![
                                ::jacquard_common::smol_str::SmolStr::new_static("notebook"),
                                ::jacquard_common::smol_str::SmolStr::new_static("authors"),
                                ::jacquard_common::smol_str::SmolStr::new_static("entryList")
                            ],
                        ),
                        nullable: None,
                        properties: {
                            #[allow(unused_mut)]
                            let mut map = ::std::collections::BTreeMap::new();
                            map.insert(
                                ::jacquard_common::smol_str::SmolStr::new_static(
                                    "createdAt",
                                ),
                                ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                    description: Some(
                                        ::jacquard_common::CowStr::new_static(
                                            "Client-declared timestamp when this was originally created.",
                                        ),
                                    ),
                                    format: Some(
                                        ::jacquard_lexicon::lexicon::LexStringFormat::Datetime,
                                    ),
                                    default: None,
                                    min_length: None,
                                    max_length: None,
                                    min_graphemes: None,
                                    max_graphemes: None,
                                    r#enum: None,
                                    r#const: None,
                                    known_values: None,
                                }),
                            );
                            map.insert(
                                ::jacquard_common::smol_str::SmolStr::new_static(
                                    "entryList",
                                ),
                                ::jacquard_lexicon::lexicon::LexObjectProperty::Array(::jacquard_lexicon::lexicon::LexArray {
                                    description: None,
                                    items: ::jacquard_lexicon::lexicon::LexArrayItem::Ref(::jacquard_lexicon::lexicon::LexRef {
                                        description: None,
                                        r#ref: ::jacquard_common::CowStr::new_static(
                                            "com.atproto.repo.strongRef",
                                        ),
                                    }),
                                    min_length: None,
                                    max_length: None,
                                }),
                            );
                            map.insert(
                                ::jacquard_common::smol_str::SmolStr::new_static(
                                    "notebook",
                                ),
                                ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                    description: None,
                                    r#ref: ::jacquard_common::CowStr::new_static(
                                        "com.atproto.repo.strongRef",
                                    ),
                                }),
                            );
                            map.insert(
                                ::jacquard_common::smol_str::SmolStr::new_static("tags"),
                                ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                    description: None,
                                    r#ref: ::jacquard_common::CowStr::new_static(
                                        "sh.weaver.notebook.defs#tags",
                                    ),
                                }),
                            );
                            map.insert(
                                ::jacquard_common::smol_str::SmolStr::new_static("title"),
                                ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                    description: None,
                                    r#ref: ::jacquard_common::CowStr::new_static(
                                        "sh.weaver.notebook.defs#title",
                                    ),
                                }),
                            );
                            map
                        },
                    }),
                }),
            );
            map
        },
    }
}