// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.identity.getRecommendedDidCredentials
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct GetRecommendedDidCredentialsOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub also_known_as: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    /// Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub rotation_keys: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub services: std::option::Option<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub verification_methods: std::option::Option<
        jacquard_common::types::value::Data<'a>,
    >,
}

/// XRPC request marker type
#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    serde::Serialize,
    serde::Deserialize,
    jacquard_derive::IntoStatic
)]
pub struct GetRecommendedDidCredentials;
/// Response type for
///com.atproto.identity.getRecommendedDidCredentials
pub struct GetRecommendedDidCredentialsResponse;
impl jacquard_common::xrpc::XrpcResp for GetRecommendedDidCredentialsResponse {
    const NSID: &'static str = "com.atproto.identity.getRecommendedDidCredentials";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetRecommendedDidCredentialsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl jacquard_common::xrpc::XrpcRequest for GetRecommendedDidCredentials {
    const NSID: &'static str = "com.atproto.identity.getRecommendedDidCredentials";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetRecommendedDidCredentialsResponse;
}

/// Endpoint type for
///com.atproto.identity.getRecommendedDidCredentials
pub struct GetRecommendedDidCredentialsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetRecommendedDidCredentialsRequest {
    const PATH: &'static str = "/xrpc/com.atproto.identity.getRecommendedDidCredentials";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetRecommendedDidCredentials;
    type Response = GetRecommendedDidCredentialsResponse;
}