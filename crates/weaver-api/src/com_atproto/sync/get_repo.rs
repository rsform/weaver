// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.sync.getRepo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetRepo<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub since: std::option::Option<jacquard_common::types::string::Tid>,
}

pub mod get_repo_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Did;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Did = Unset;
    }
    ///State transition - sets the `did` field to Set
    pub struct SetDid<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetDid<S> {}
    impl<S: State> State for SetDid<S> {
        type Did = Set<members::did>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `did` field
        pub struct did(());
    }
}

/// Builder for constructing an instance of this type
pub struct GetRepoBuilder<'a, S: get_repo_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
        ::core::option::Option<jacquard_common::types::string::Tid>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> GetRepo<'a> {
    /// Create a new builder for this type
    pub fn new() -> GetRepoBuilder<'a, get_repo_state::Empty> {
        GetRepoBuilder::new()
    }
}

impl<'a> GetRepoBuilder<'a, get_repo_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        GetRepoBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> GetRepoBuilder<'a, S>
where
    S: get_repo_state::State,
    S::Did: get_repo_state::IsUnset,
{
    /// Set the `did` field (required)
    pub fn did(
        mut self,
        value: impl Into<jacquard_common::types::string::Did<'a>>,
    ) -> GetRepoBuilder<'a, get_repo_state::SetDid<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        GetRepoBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: get_repo_state::State> GetRepoBuilder<'a, S> {
    /// Set the `since` field (optional)
    pub fn since(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Tid>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `since` field to an Option value (optional)
    pub fn maybe_since(
        mut self,
        value: Option<jacquard_common::types::string::Tid>,
    ) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S> GetRepoBuilder<'a, S>
where
    S: get_repo_state::State,
    S::Did: get_repo_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> GetRepo<'a> {
        GetRepo {
            did: self.__unsafe_private_named.0.unwrap(),
            since: self.__unsafe_private_named.1,
        }
    }
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetRepoOutput {
    pub body: bytes::Bytes,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetRepoError<'a> {
    #[serde(rename = "RepoNotFound")]
    RepoNotFound(std::option::Option<String>),
    #[serde(rename = "RepoTakendown")]
    RepoTakendown(std::option::Option<String>),
    #[serde(rename = "RepoSuspended")]
    RepoSuspended(std::option::Option<String>),
    #[serde(rename = "RepoDeactivated")]
    RepoDeactivated(std::option::Option<String>),
}

impl std::fmt::Display for GetRepoError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::RepoNotFound(msg) => {
                write!(f, "RepoNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoTakendown(msg) => {
                write!(f, "RepoTakendown")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoSuspended(msg) => {
                write!(f, "RepoSuspended")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoDeactivated(msg) => {
                write!(f, "RepoDeactivated")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// Response type for
///com.atproto.sync.getRepo
pub struct GetRepoResponse;
impl jacquard_common::xrpc::XrpcResp for GetRepoResponse {
    const NSID: &'static str = "com.atproto.sync.getRepo";
    const ENCODING: &'static str = "application/vnd.ipld.car";
    type Output<'de> = GetRepoOutput;
    type Err<'de> = GetRepoError<'de>;
    fn encode_output(
        output: &Self::Output<'_>,
    ) -> Result<Vec<u8>, jacquard_common::xrpc::EncodeError> {
        Ok(output.body.to_vec())
    }
    fn decode_output<'de>(
        body: &'de [u8],
    ) -> Result<Self::Output<'de>, jacquard_common::error::DecodeError>
    where
        Self::Output<'de>: serde::Deserialize<'de>,
    {
        Ok(GetRepoOutput {
            body: bytes::Bytes::copy_from_slice(body),
        })
    }
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetRepo<'a> {
    const NSID: &'static str = "com.atproto.sync.getRepo";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetRepoResponse;
}

/// Endpoint type for
///com.atproto.sync.getRepo
pub struct GetRepoRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetRepoRequest {
    const PATH: &'static str = "/xrpc/com.atproto.sync.getRepo";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetRepo<'de>;
    type Response = GetRepoResponse;
}