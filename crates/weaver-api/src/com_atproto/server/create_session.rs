// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.server.createSession
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct CreateSession<'a> {
    /// When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub allow_takendown: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub auth_factor_token: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Handle or other identifier supported by the server for the authenticating user.
    #[serde(borrow)]
    pub identifier: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub password: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CreateSessionOutput<'a> {
    #[serde(borrow)]
    pub access_jwt: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub active: std::option::Option<bool>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub did_doc: std::option::Option<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub email: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub email_auth_factor: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub email_confirmed: std::option::Option<bool>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    #[serde(borrow)]
    pub refresh_jwt: jacquard_common::CowStr<'a>,
    /// If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub status: std::option::Option<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CreateSessionError<'a> {
    #[serde(rename = "AccountTakedown")]
    AccountTakedown(std::option::Option<String>),
    #[serde(rename = "AuthFactorTokenRequired")]
    AuthFactorTokenRequired(std::option::Option<String>),
}

impl std::fmt::Display for CreateSessionError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::AccountTakedown(msg) => {
                write!(f, "AccountTakedown")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::AuthFactorTokenRequired(msg) => {
                write!(f, "AuthFactorTokenRequired")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// Response type for
///com.atproto.server.createSession
pub struct CreateSessionResponse;
impl jacquard_common::xrpc::XrpcResp for CreateSessionResponse {
    const NSID: &'static str = "com.atproto.server.createSession";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CreateSessionOutput<'de>;
    type Err<'de> = CreateSessionError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for CreateSession<'a> {
    const NSID: &'static str = "com.atproto.server.createSession";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = CreateSessionResponse;
}

/// Endpoint type for
///com.atproto.server.createSession
pub struct CreateSessionRequest;
impl jacquard_common::xrpc::XrpcEndpoint for CreateSessionRequest {
    const PATH: &'static str = "/xrpc/com.atproto.server.createSession";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = CreateSession<'de>;
    type Response = CreateSessionResponse;
}