// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.lexicon.schema
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Representation of Lexicon schemas themselves, when published as atproto records. Note that the schema language is not defined in Lexicon; this meta schema currently only includes a single version field ('lexicon'). See the atproto specifications for description of the other expected top-level fields ('id', 'defs', etc).
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Schema<'a> {
    /// Indicates the 'version' of the Lexicon language. Must be '1' for the current atproto/Lexicon schema system.
    pub lexicon: i64,
}

pub mod schema_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Lexicon;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Lexicon = Unset;
    }
    ///State transition - sets the `lexicon` field to Set
    pub struct SetLexicon<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetLexicon<S> {}
    impl<S: State> State for SetLexicon<S> {
        type Lexicon = Set<members::lexicon>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `lexicon` field
        pub struct lexicon(());
    }
}

/// Builder for constructing an instance of this type
pub struct SchemaBuilder<'a, S: schema_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (::core::option::Option<i64>,),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> Schema<'a> {
    /// Create a new builder for this type
    pub fn new() -> SchemaBuilder<'a, schema_state::Empty> {
        SchemaBuilder::new()
    }
}

impl<'a> SchemaBuilder<'a, schema_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        SchemaBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None,),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> SchemaBuilder<'a, S>
where
    S: schema_state::State,
    S::Lexicon: schema_state::IsUnset,
{
    /// Set the `lexicon` field (required)
    pub fn lexicon(
        mut self,
        value: impl Into<i64>,
    ) -> SchemaBuilder<'a, schema_state::SetLexicon<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        SchemaBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> SchemaBuilder<'a, S>
where
    S: schema_state::State,
    S::Lexicon: schema_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> Schema<'a> {
        Schema {
            lexicon: self.__unsafe_private_named.0.unwrap(),
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> Schema<'a> {
        Schema {
            lexicon: self.__unsafe_private_named.0.unwrap(),
            extra_data: Some(extra_data),
        }
    }
}

impl<'a> Schema<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, SchemaRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SchemaGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Schema<'a>,
}

impl From<SchemaGetRecordOutput<'_>> for Schema<'_> {
    fn from(output: SchemaGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Schema<'_> {
    const NSID: &'static str = "com.atproto.lexicon.schema";
    type Record = SchemaRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct SchemaRecord;
impl jacquard_common::xrpc::XrpcResp for SchemaRecord {
    const NSID: &'static str = "com.atproto.lexicon.schema";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = SchemaGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for SchemaRecord {
    const NSID: &'static str = "com.atproto.lexicon.schema";
    type Record = SchemaRecord;
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for Schema<'a> {
    fn nsid() -> &'static str {
        "com.atproto.lexicon.schema"
    }
    fn def_name() -> &'static str {
        "main"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_com_atproto_lexicon_schema()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        Ok(())
    }
}

fn lexicon_doc_com_atproto_lexicon_schema() -> ::jacquard_lexicon::lexicon::LexiconDoc<
    'static,
> {
    ::jacquard_lexicon::lexicon::LexiconDoc {
        lexicon: ::jacquard_lexicon::lexicon::Lexicon::Lexicon1,
        id: ::jacquard_common::CowStr::new_static("com.atproto.lexicon.schema"),
        revision: None,
        description: None,
        defs: {
            let mut map = ::std::collections::BTreeMap::new();
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("main"),
                ::jacquard_lexicon::lexicon::LexUserType::Record(::jacquard_lexicon::lexicon::LexRecord {
                    description: Some(
                        ::jacquard_common::CowStr::new_static(
                            "Representation of Lexicon schemas themselves, when published as atproto records. Note that the schema language is not defined in Lexicon; this meta schema currently only includes a single version field ('lexicon'). See the atproto specifications for description of the other expected top-level fields ('id', 'defs', etc).",
                        ),
                    ),
                    key: Some(::jacquard_common::CowStr::new_static("nsid")),
                    record: ::jacquard_lexicon::lexicon::LexRecordRecord::Object(::jacquard_lexicon::lexicon::LexObject {
                        description: None,
                        required: Some(
                            vec![
                                ::jacquard_common::smol_str::SmolStr::new_static("lexicon")
                            ],
                        ),
                        nullable: None,
                        properties: {
                            #[allow(unused_mut)]
                            let mut map = ::std::collections::BTreeMap::new();
                            map.insert(
                                ::jacquard_common::smol_str::SmolStr::new_static("lexicon"),
                                ::jacquard_lexicon::lexicon::LexObjectProperty::Integer(::jacquard_lexicon::lexicon::LexInteger {
                                    description: None,
                                    default: None,
                                    minimum: None,
                                    maximum: None,
                                    r#enum: None,
                                    r#const: None,
                                }),
                            );
                            map
                        },
                    }),
                }),
            );
            map
        },
    }
}