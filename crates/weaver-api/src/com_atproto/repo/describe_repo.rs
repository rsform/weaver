// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.repo.describeRepo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct DescribeRepo<'a> {
    #[serde(borrow)]
    pub repo: jacquard_common::types::ident::AtIdentifier<'a>,
}

pub mod describe_repo_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Repo;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Repo = Unset;
    }
    ///State transition - sets the `repo` field to Set
    pub struct SetRepo<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetRepo<S> {}
    impl<S: State> State for SetRepo<S> {
        type Repo = Set<members::repo>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `repo` field
        pub struct repo(());
    }
}

/// Builder for constructing an instance of this type
pub struct DescribeRepoBuilder<'a, S: describe_repo_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::ident::AtIdentifier<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> DescribeRepo<'a> {
    /// Create a new builder for this type
    pub fn new() -> DescribeRepoBuilder<'a, describe_repo_state::Empty> {
        DescribeRepoBuilder::new()
    }
}

impl<'a> DescribeRepoBuilder<'a, describe_repo_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        DescribeRepoBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None,),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> DescribeRepoBuilder<'a, S>
where
    S: describe_repo_state::State,
    S::Repo: describe_repo_state::IsUnset,
{
    /// Set the `repo` field (required)
    pub fn repo(
        mut self,
        value: impl Into<jacquard_common::types::ident::AtIdentifier<'a>>,
    ) -> DescribeRepoBuilder<'a, describe_repo_state::SetRepo<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        DescribeRepoBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> DescribeRepoBuilder<'a, S>
where
    S: describe_repo_state::State,
    S::Repo: describe_repo_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> DescribeRepo<'a> {
        DescribeRepo {
            repo: self.__unsafe_private_named.0.unwrap(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct DescribeRepoOutput<'a> {
    /// List of all the collections (NSIDs) for which this repo contains at least one record.
    #[serde(borrow)]
    pub collections: Vec<jacquard_common::types::string::Nsid<'a>>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    /// The complete DID document for this account.
    #[serde(borrow)]
    pub did_doc: jacquard_common::types::value::Data<'a>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    /// Indicates if handle is currently valid (resolves bi-directionally)
    pub handle_is_correct: bool,
}

/// Response type for
///com.atproto.repo.describeRepo
pub struct DescribeRepoResponse;
impl jacquard_common::xrpc::XrpcResp for DescribeRepoResponse {
    const NSID: &'static str = "com.atproto.repo.describeRepo";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = DescribeRepoOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for DescribeRepo<'a> {
    const NSID: &'static str = "com.atproto.repo.describeRepo";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = DescribeRepoResponse;
}

/// Endpoint type for
///com.atproto.repo.describeRepo
pub struct DescribeRepoRequest;
impl jacquard_common::xrpc::XrpcEndpoint for DescribeRepoRequest {
    const PATH: &'static str = "/xrpc/com.atproto.repo.describeRepo";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = DescribeRepo<'de>;
    type Response = DescribeRepoResponse;
}