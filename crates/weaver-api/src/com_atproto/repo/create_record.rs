// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.repo.createRecord
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CreateRecord<'a> {
    /// The NSID of the record collection.
    #[serde(borrow)]
    pub collection: jacquard_common::types::string::Nsid<'a>,
    /// The record itself. Must contain a $type field.
    #[serde(borrow)]
    pub record: jacquard_common::types::value::Data<'a>,
    /// The handle or DID of the repo (aka, current account).
    #[serde(borrow)]
    pub repo: jacquard_common::types::ident::AtIdentifier<'a>,
    /// The Record Key.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub rkey: Option<
        jacquard_common::types::string::RecordKey<
            jacquard_common::types::string::Rkey<'a>,
        >,
    >,
    /// Compare and swap with the previous commit by CID.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub swap_commit: Option<jacquard_common::types::string::Cid<'a>>,
    /// Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub validate: Option<bool>,
}

pub mod create_record_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Repo;
        type Collection;
        type Record;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Repo = Unset;
        type Collection = Unset;
        type Record = Unset;
    }
    ///State transition - sets the `repo` field to Set
    pub struct SetRepo<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetRepo<S> {}
    impl<S: State> State for SetRepo<S> {
        type Repo = Set<members::repo>;
        type Collection = S::Collection;
        type Record = S::Record;
    }
    ///State transition - sets the `collection` field to Set
    pub struct SetCollection<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetCollection<S> {}
    impl<S: State> State for SetCollection<S> {
        type Repo = S::Repo;
        type Collection = Set<members::collection>;
        type Record = S::Record;
    }
    ///State transition - sets the `record` field to Set
    pub struct SetRecord<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetRecord<S> {}
    impl<S: State> State for SetRecord<S> {
        type Repo = S::Repo;
        type Collection = S::Collection;
        type Record = Set<members::record>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `repo` field
        pub struct repo(());
        ///Marker type for the `collection` field
        pub struct collection(());
        ///Marker type for the `record` field
        pub struct record(());
    }
}

/// Builder for constructing an instance of this type
pub struct CreateRecordBuilder<'a, S: create_record_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::string::Nsid<'a>>,
        ::core::option::Option<jacquard_common::types::value::Data<'a>>,
        ::core::option::Option<jacquard_common::types::ident::AtIdentifier<'a>>,
        ::core::option::Option<
            jacquard_common::types::string::RecordKey<
                jacquard_common::types::string::Rkey<'a>,
            >,
        >,
        ::core::option::Option<jacquard_common::types::string::Cid<'a>>,
        ::core::option::Option<bool>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> CreateRecord<'a> {
    /// Create a new builder for this type
    pub fn new() -> CreateRecordBuilder<'a, create_record_state::Empty> {
        CreateRecordBuilder::new()
    }
}

impl<'a> CreateRecordBuilder<'a, create_record_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        CreateRecordBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None, None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> CreateRecordBuilder<'a, S>
where
    S: create_record_state::State,
    S::Collection: create_record_state::IsUnset,
{
    /// Set the `collection` field (required)
    pub fn collection(
        mut self,
        value: impl Into<jacquard_common::types::string::Nsid<'a>>,
    ) -> CreateRecordBuilder<'a, create_record_state::SetCollection<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        CreateRecordBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> CreateRecordBuilder<'a, S>
where
    S: create_record_state::State,
    S::Record: create_record_state::IsUnset,
{
    /// Set the `record` field (required)
    pub fn record(
        mut self,
        value: impl Into<jacquard_common::types::value::Data<'a>>,
    ) -> CreateRecordBuilder<'a, create_record_state::SetRecord<S>> {
        self.__unsafe_private_named.1 = ::core::option::Option::Some(value.into());
        CreateRecordBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> CreateRecordBuilder<'a, S>
where
    S: create_record_state::State,
    S::Repo: create_record_state::IsUnset,
{
    /// Set the `repo` field (required)
    pub fn repo(
        mut self,
        value: impl Into<jacquard_common::types::ident::AtIdentifier<'a>>,
    ) -> CreateRecordBuilder<'a, create_record_state::SetRepo<S>> {
        self.__unsafe_private_named.2 = ::core::option::Option::Some(value.into());
        CreateRecordBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: create_record_state::State> CreateRecordBuilder<'a, S> {
    /// Set the `rkey` field (optional)
    pub fn rkey(
        mut self,
        value: impl Into<
            Option<
                jacquard_common::types::string::RecordKey<
                    jacquard_common::types::string::Rkey<'a>,
                >,
            >,
        >,
    ) -> Self {
        self.__unsafe_private_named.3 = value.into();
        self
    }
    /// Set the `rkey` field to an Option value (optional)
    pub fn maybe_rkey(
        mut self,
        value: Option<
            jacquard_common::types::string::RecordKey<
                jacquard_common::types::string::Rkey<'a>,
            >,
        >,
    ) -> Self {
        self.__unsafe_private_named.3 = value;
        self
    }
}

impl<'a, S: create_record_state::State> CreateRecordBuilder<'a, S> {
    /// Set the `swapCommit` field (optional)
    pub fn swap_commit(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Cid<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value.into();
        self
    }
    /// Set the `swapCommit` field to an Option value (optional)
    pub fn maybe_swap_commit(
        mut self,
        value: Option<jacquard_common::types::string::Cid<'a>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value;
        self
    }
}

impl<'a, S: create_record_state::State> CreateRecordBuilder<'a, S> {
    /// Set the `validate` field (optional)
    pub fn validate(mut self, value: impl Into<Option<bool>>) -> Self {
        self.__unsafe_private_named.5 = value.into();
        self
    }
    /// Set the `validate` field to an Option value (optional)
    pub fn maybe_validate(mut self, value: Option<bool>) -> Self {
        self.__unsafe_private_named.5 = value;
        self
    }
}

impl<'a, S> CreateRecordBuilder<'a, S>
where
    S: create_record_state::State,
    S::Repo: create_record_state::IsSet,
    S::Collection: create_record_state::IsSet,
    S::Record: create_record_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> CreateRecord<'a> {
        CreateRecord {
            collection: self.__unsafe_private_named.0.unwrap(),
            record: self.__unsafe_private_named.1.unwrap(),
            repo: self.__unsafe_private_named.2.unwrap(),
            rkey: self.__unsafe_private_named.3,
            swap_commit: self.__unsafe_private_named.4,
            validate: self.__unsafe_private_named.5,
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> CreateRecord<'a> {
        CreateRecord {
            collection: self.__unsafe_private_named.0.unwrap(),
            record: self.__unsafe_private_named.1.unwrap(),
            repo: self.__unsafe_private_named.2.unwrap(),
            rkey: self.__unsafe_private_named.3,
            swap_commit: self.__unsafe_private_named.4,
            validate: self.__unsafe_private_named.5,
            extra_data: Some(extra_data),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CreateRecordOutput<'a> {
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub commit: std::option::Option<crate::com_atproto::repo::CommitMeta<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub validation_status: std::option::Option<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CreateRecordError<'a> {
    /// Indicates that 'swapCommit' didn't match current repo commit.
    #[serde(rename = "InvalidSwap")]
    InvalidSwap(std::option::Option<String>),
}

impl std::fmt::Display for CreateRecordError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::InvalidSwap(msg) => {
                write!(f, "InvalidSwap")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// Response type for
///com.atproto.repo.createRecord
pub struct CreateRecordResponse;
impl jacquard_common::xrpc::XrpcResp for CreateRecordResponse {
    const NSID: &'static str = "com.atproto.repo.createRecord";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CreateRecordOutput<'de>;
    type Err<'de> = CreateRecordError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for CreateRecord<'a> {
    const NSID: &'static str = "com.atproto.repo.createRecord";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = CreateRecordResponse;
}

/// Endpoint type for
///com.atproto.repo.createRecord
pub struct CreateRecordRequest;
impl jacquard_common::xrpc::XrpcEndpoint for CreateRecordRequest {
    const PATH: &'static str = "/xrpc/com.atproto.repo.createRecord";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = CreateRecord<'de>;
    type Response = CreateRecordResponse;
}