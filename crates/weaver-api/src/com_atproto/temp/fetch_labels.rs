// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.temp.fetchLabels
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct FetchLabels {
    ///(default: 50, min: 1, max: 250)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub since: std::option::Option<i64>,
}

pub mod fetch_labels_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {}
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {}
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {}
}

/// Builder for constructing an instance of this type
pub struct FetchLabelsBuilder<S: fetch_labels_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (::core::option::Option<i64>, ::core::option::Option<i64>),
}

impl FetchLabels {
    /// Create a new builder for this type
    pub fn new() -> FetchLabelsBuilder<fetch_labels_state::Empty> {
        FetchLabelsBuilder::new()
    }
}

impl FetchLabelsBuilder<fetch_labels_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        FetchLabelsBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None),
        }
    }
}

impl<S: fetch_labels_state::State> FetchLabelsBuilder<S> {
    /// Set the `limit` field (optional)
    pub fn limit(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `limit` field to an Option value (optional)
    pub fn maybe_limit(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<S: fetch_labels_state::State> FetchLabelsBuilder<S> {
    /// Set the `since` field (optional)
    pub fn since(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `since` field to an Option value (optional)
    pub fn maybe_since(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<S> FetchLabelsBuilder<S>
where
    S: fetch_labels_state::State,
{
    /// Build the final struct
    pub fn build(self) -> FetchLabels {
        FetchLabels {
            limit: self.__unsafe_private_named.0,
            since: self.__unsafe_private_named.1,
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct FetchLabelsOutput<'a> {
    #[serde(borrow)]
    pub labels: Vec<crate::com_atproto::label::Label<'a>>,
}

/// Response type for
///com.atproto.temp.fetchLabels
pub struct FetchLabelsResponse;
impl jacquard_common::xrpc::XrpcResp for FetchLabelsResponse {
    const NSID: &'static str = "com.atproto.temp.fetchLabels";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = FetchLabelsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl jacquard_common::xrpc::XrpcRequest for FetchLabels {
    const NSID: &'static str = "com.atproto.temp.fetchLabels";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = FetchLabelsResponse;
}

/// Endpoint type for
///com.atproto.temp.fetchLabels
pub struct FetchLabelsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for FetchLabelsRequest {
    const PATH: &'static str = "/xrpc/com.atproto.temp.fetchLabels";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = FetchLabels;
    type Response = FetchLabelsResponse;
}