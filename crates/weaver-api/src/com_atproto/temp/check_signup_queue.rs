// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.temp.checkSignupQueue
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CheckSignupQueueOutput<'a> {
    pub activated: bool,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub estimated_time_ms: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub place_in_queue: std::option::Option<i64>,
}

/// XRPC request marker type
#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    serde::Serialize,
    serde::Deserialize,
    jacquard_derive::IntoStatic
)]
pub struct CheckSignupQueue;
/// Response type for
///com.atproto.temp.checkSignupQueue
pub struct CheckSignupQueueResponse;
impl jacquard_common::xrpc::XrpcResp for CheckSignupQueueResponse {
    const NSID: &'static str = "com.atproto.temp.checkSignupQueue";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CheckSignupQueueOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl jacquard_common::xrpc::XrpcRequest for CheckSignupQueue {
    const NSID: &'static str = "com.atproto.temp.checkSignupQueue";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = CheckSignupQueueResponse;
}

/// Endpoint type for
///com.atproto.temp.checkSignupQueue
pub struct CheckSignupQueueRequest;
impl jacquard_common::xrpc::XrpcEndpoint for CheckSignupQueueRequest {
    const PATH: &'static str = "/xrpc/com.atproto.temp.checkSignupQueue";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = CheckSignupQueue;
    type Response = CheckSignupQueueResponse;
}