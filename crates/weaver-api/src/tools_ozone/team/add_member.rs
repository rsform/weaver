// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.team.addMember
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct AddMember<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub role: jacquard_common::CowStr<'a>,
}

pub mod add_member_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Did;
        type Role;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Did = Unset;
        type Role = Unset;
    }
    ///State transition - sets the `did` field to Set
    pub struct SetDid<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetDid<S> {}
    impl<S: State> State for SetDid<S> {
        type Did = Set<members::did>;
        type Role = S::Role;
    }
    ///State transition - sets the `role` field to Set
    pub struct SetRole<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetRole<S> {}
    impl<S: State> State for SetRole<S> {
        type Did = S::Did;
        type Role = Set<members::role>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `did` field
        pub struct did(());
        ///Marker type for the `role` field
        pub struct role(());
    }
}

/// Builder for constructing an instance of this type
pub struct AddMemberBuilder<'a, S: add_member_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> AddMember<'a> {
    /// Create a new builder for this type
    pub fn new() -> AddMemberBuilder<'a, add_member_state::Empty> {
        AddMemberBuilder::new()
    }
}

impl<'a> AddMemberBuilder<'a, add_member_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        AddMemberBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> AddMemberBuilder<'a, S>
where
    S: add_member_state::State,
    S::Did: add_member_state::IsUnset,
{
    /// Set the `did` field (required)
    pub fn did(
        mut self,
        value: impl Into<jacquard_common::types::string::Did<'a>>,
    ) -> AddMemberBuilder<'a, add_member_state::SetDid<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        AddMemberBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> AddMemberBuilder<'a, S>
where
    S: add_member_state::State,
    S::Role: add_member_state::IsUnset,
{
    /// Set the `role` field (required)
    pub fn role(
        mut self,
        value: impl Into<jacquard_common::CowStr<'a>>,
    ) -> AddMemberBuilder<'a, add_member_state::SetRole<S>> {
        self.__unsafe_private_named.1 = ::core::option::Option::Some(value.into());
        AddMemberBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> AddMemberBuilder<'a, S>
where
    S: add_member_state::State,
    S::Did: add_member_state::IsSet,
    S::Role: add_member_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> AddMember<'a> {
        AddMember {
            did: self.__unsafe_private_named.0.unwrap(),
            role: self.__unsafe_private_named.1.unwrap(),
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> AddMember<'a> {
        AddMember {
            did: self.__unsafe_private_named.0.unwrap(),
            role: self.__unsafe_private_named.1.unwrap(),
            extra_data: Some(extra_data),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct AddMemberOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::tools_ozone::team::Member<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum AddMemberError<'a> {
    /// Member already exists in the team.
    #[serde(rename = "MemberAlreadyExists")]
    MemberAlreadyExists(std::option::Option<String>),
}

impl std::fmt::Display for AddMemberError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::MemberAlreadyExists(msg) => {
                write!(f, "MemberAlreadyExists")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// Response type for
///tools.ozone.team.addMember
pub struct AddMemberResponse;
impl jacquard_common::xrpc::XrpcResp for AddMemberResponse {
    const NSID: &'static str = "tools.ozone.team.addMember";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = AddMemberOutput<'de>;
    type Err<'de> = AddMemberError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for AddMember<'a> {
    const NSID: &'static str = "tools.ozone.team.addMember";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = AddMemberResponse;
}

/// Endpoint type for
///tools.ozone.team.addMember
pub struct AddMemberRequest;
impl jacquard_common::xrpc::XrpcEndpoint for AddMemberRequest {
    const PATH: &'static str = "/xrpc/tools.ozone.team.addMember";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = AddMember<'de>;
    type Response = AddMemberResponse;
}