// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.getRepos
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetRepos<'a> {
    #[serde(borrow)]
    pub dids: Vec<jacquard_common::types::string::Did<'a>>,
}

pub mod get_repos_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Dids;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Dids = Unset;
    }
    ///State transition - sets the `dids` field to Set
    pub struct SetDids<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetDids<S> {}
    impl<S: State> State for SetDids<S> {
        type Dids = Set<members::dids>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `dids` field
        pub struct dids(());
    }
}

/// Builder for constructing an instance of this type
pub struct GetReposBuilder<'a, S: get_repos_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<Vec<jacquard_common::types::string::Did<'a>>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> GetRepos<'a> {
    /// Create a new builder for this type
    pub fn new() -> GetReposBuilder<'a, get_repos_state::Empty> {
        GetReposBuilder::new()
    }
}

impl<'a> GetReposBuilder<'a, get_repos_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        GetReposBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None,),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> GetReposBuilder<'a, S>
where
    S: get_repos_state::State,
    S::Dids: get_repos_state::IsUnset,
{
    /// Set the `dids` field (required)
    pub fn dids(
        mut self,
        value: impl Into<Vec<jacquard_common::types::string::Did<'a>>>,
    ) -> GetReposBuilder<'a, get_repos_state::SetDids<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        GetReposBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> GetReposBuilder<'a, S>
where
    S: get_repos_state::State,
    S::Dids: get_repos_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> GetRepos<'a> {
        GetRepos {
            dids: self.__unsafe_private_named.0.unwrap(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetReposOutput<'a> {
    #[serde(borrow)]
    pub repos: Vec<GetReposOutputReposItem<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetReposOutputReposItem<'a> {
    #[serde(rename = "tools.ozone.moderation.defs#repoViewDetail")]
    RepoViewDetail(Box<crate::tools_ozone::moderation::RepoViewDetail<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#repoViewNotFound")]
    RepoViewNotFound(Box<crate::tools_ozone::moderation::RepoViewNotFound<'a>>),
}

/// Response type for
///tools.ozone.moderation.getRepos
pub struct GetReposResponse;
impl jacquard_common::xrpc::XrpcResp for GetReposResponse {
    const NSID: &'static str = "tools.ozone.moderation.getRepos";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetReposOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetRepos<'a> {
    const NSID: &'static str = "tools.ozone.moderation.getRepos";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetReposResponse;
}

/// Endpoint type for
///tools.ozone.moderation.getRepos
pub struct GetReposRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetReposRequest {
    const PATH: &'static str = "/xrpc/tools.ozone.moderation.getRepos";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetRepos<'de>;
    type Response = GetReposResponse;
}