// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.safelink.removeRule
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct RemoveRule<'a> {
    /// Optional comment about why the rule is being removed
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub comment: Option<jacquard_common::CowStr<'a>>,
    /// Optional DID of the user. Only respected when using admin auth.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub created_by: Option<jacquard_common::types::string::Did<'a>>,
    #[serde(borrow)]
    pub pattern: crate::tools_ozone::safelink::PatternType<'a>,
    /// The URL or domain to remove the rule for
    #[serde(borrow)]
    pub url: jacquard_common::CowStr<'a>,
}

pub mod remove_rule_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Url;
        type Pattern;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Url = Unset;
        type Pattern = Unset;
    }
    ///State transition - sets the `url` field to Set
    pub struct SetUrl<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetUrl<S> {}
    impl<S: State> State for SetUrl<S> {
        type Url = Set<members::url>;
        type Pattern = S::Pattern;
    }
    ///State transition - sets the `pattern` field to Set
    pub struct SetPattern<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetPattern<S> {}
    impl<S: State> State for SetPattern<S> {
        type Url = S::Url;
        type Pattern = Set<members::pattern>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `url` field
        pub struct url(());
        ///Marker type for the `pattern` field
        pub struct pattern(());
    }
}

/// Builder for constructing an instance of this type
pub struct RemoveRuleBuilder<'a, S: remove_rule_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
        ::core::option::Option<crate::tools_ozone::safelink::PatternType<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> RemoveRule<'a> {
    /// Create a new builder for this type
    pub fn new() -> RemoveRuleBuilder<'a, remove_rule_state::Empty> {
        RemoveRuleBuilder::new()
    }
}

impl<'a> RemoveRuleBuilder<'a, remove_rule_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        RemoveRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: remove_rule_state::State> RemoveRuleBuilder<'a, S> {
    /// Set the `comment` field (optional)
    pub fn comment(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `comment` field to an Option value (optional)
    pub fn maybe_comment(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<'a, S: remove_rule_state::State> RemoveRuleBuilder<'a, S> {
    /// Set the `createdBy` field (optional)
    pub fn created_by(
        mut self,
        value: impl Into<Option<jacquard_common::types::string::Did<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `createdBy` field to an Option value (optional)
    pub fn maybe_created_by(
        mut self,
        value: Option<jacquard_common::types::string::Did<'a>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S> RemoveRuleBuilder<'a, S>
where
    S: remove_rule_state::State,
    S::Pattern: remove_rule_state::IsUnset,
{
    /// Set the `pattern` field (required)
    pub fn pattern(
        mut self,
        value: impl Into<crate::tools_ozone::safelink::PatternType<'a>>,
    ) -> RemoveRuleBuilder<'a, remove_rule_state::SetPattern<S>> {
        self.__unsafe_private_named.2 = ::core::option::Option::Some(value.into());
        RemoveRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> RemoveRuleBuilder<'a, S>
where
    S: remove_rule_state::State,
    S::Url: remove_rule_state::IsUnset,
{
    /// Set the `url` field (required)
    pub fn url(
        mut self,
        value: impl Into<jacquard_common::CowStr<'a>>,
    ) -> RemoveRuleBuilder<'a, remove_rule_state::SetUrl<S>> {
        self.__unsafe_private_named.3 = ::core::option::Option::Some(value.into());
        RemoveRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> RemoveRuleBuilder<'a, S>
where
    S: remove_rule_state::State,
    S::Url: remove_rule_state::IsSet,
    S::Pattern: remove_rule_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> RemoveRule<'a> {
        RemoveRule {
            comment: self.__unsafe_private_named.0,
            created_by: self.__unsafe_private_named.1,
            pattern: self.__unsafe_private_named.2.unwrap(),
            url: self.__unsafe_private_named.3.unwrap(),
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> RemoveRule<'a> {
        RemoveRule {
            comment: self.__unsafe_private_named.0,
            created_by: self.__unsafe_private_named.1,
            pattern: self.__unsafe_private_named.2.unwrap(),
            url: self.__unsafe_private_named.3.unwrap(),
            extra_data: Some(extra_data),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct RemoveRuleOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::tools_ozone::safelink::Event<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum RemoveRuleError<'a> {
    /// No active rule found for this URL/domain
    #[serde(rename = "RuleNotFound")]
    RuleNotFound(std::option::Option<String>),
}

impl std::fmt::Display for RemoveRuleError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::RuleNotFound(msg) => {
                write!(f, "RuleNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// Response type for
///tools.ozone.safelink.removeRule
pub struct RemoveRuleResponse;
impl jacquard_common::xrpc::XrpcResp for RemoveRuleResponse {
    const NSID: &'static str = "tools.ozone.safelink.removeRule";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = RemoveRuleOutput<'de>;
    type Err<'de> = RemoveRuleError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for RemoveRule<'a> {
    const NSID: &'static str = "tools.ozone.safelink.removeRule";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = RemoveRuleResponse;
}

/// Endpoint type for
///tools.ozone.safelink.removeRule
pub struct RemoveRuleRequest;
impl jacquard_common::xrpc::XrpcEndpoint for RemoveRuleRequest {
    const PATH: &'static str = "/xrpc/tools.ozone.safelink.removeRule";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = RemoveRule<'de>;
    type Response = RemoveRuleResponse;
}