// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.safelink.queryRules
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct QueryRules<'a> {
    /// Filter by action types
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub actions: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    /// Filter by rule creator
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub created_by: std::option::Option<jacquard_common::types::string::Did<'a>>,
    /// Cursor for pagination
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Maximum number of results to return
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    /// Filter by pattern type
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pattern_type: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Filter by reason type
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reason: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Sort direction
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sort_direction: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Filter by specific URLs or domains
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub urls: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct QueryRulesOutput<'a> {
    /// Next cursor for pagination. Only present if there are more results.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub rules: Vec<crate::tools_ozone::safelink::UrlRule<'a>>,
}

/// Response type for
///tools.ozone.safelink.queryRules
pub struct QueryRulesResponse;
impl jacquard_common::xrpc::XrpcResp for QueryRulesResponse {
    const NSID: &'static str = "tools.ozone.safelink.queryRules";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = QueryRulesOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for QueryRules<'a> {
    const NSID: &'static str = "tools.ozone.safelink.queryRules";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = QueryRulesResponse;
}

/// Endpoint type for
///tools.ozone.safelink.queryRules
pub struct QueryRulesRequest;
impl jacquard_common::xrpc::XrpcEndpoint for QueryRulesRequest {
    const PATH: &'static str = "/xrpc/tools.ozone.safelink.queryRules";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = QueryRules<'de>;
    type Response = QueryRulesResponse;
}