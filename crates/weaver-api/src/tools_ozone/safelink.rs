// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.safelink.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod add_rule;
pub mod query_events;
pub mod query_rules;
pub mod remove_rule;
pub mod update_rule;

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ActionType<'a> {
    Block,
    Warn,
    Whitelist,
    Other(jacquard_common::CowStr<'a>),
}

impl<'a> ActionType<'a> {
    pub fn as_str(&self) -> &str {
        match self {
            Self::Block => "block",
            Self::Warn => "warn",
            Self::Whitelist => "whitelist",
            Self::Other(s) => s.as_ref(),
        }
    }
}

impl<'a> From<&'a str> for ActionType<'a> {
    fn from(s: &'a str) -> Self {
        match s {
            "block" => Self::Block,
            "warn" => Self::Warn,
            "whitelist" => Self::Whitelist,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> From<String> for ActionType<'a> {
    fn from(s: String) -> Self {
        match s.as_str() {
            "block" => Self::Block,
            "warn" => Self::Warn,
            "whitelist" => Self::Whitelist,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> AsRef<str> for ActionType<'a> {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

impl<'a> serde::Serialize for ActionType<'a> {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de, 'a> serde::Deserialize<'de> for ActionType<'a>
where
    'de: 'a,
{
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = <&'de str>::deserialize(deserializer)?;
        Ok(Self::from(s))
    }
}

impl jacquard_common::IntoStatic for ActionType<'_> {
    type Output = ActionType<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ActionType::Block => ActionType::Block,
            ActionType::Warn => ActionType::Warn,
            ActionType::Whitelist => ActionType::Whitelist,
            ActionType::Other(v) => ActionType::Other(v.into_static()),
        }
    }
}

/// An event for URL safety decisions
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Event<'a> {
    #[serde(borrow)]
    pub action: crate::tools_ozone::safelink::ActionType<'a>,
    /// Optional comment about the decision
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub comment: Option<jacquard_common::CowStr<'a>>,
    pub created_at: jacquard_common::types::string::Datetime,
    /// DID of the user who created this rule
    #[serde(borrow)]
    pub created_by: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub event_type: crate::tools_ozone::safelink::EventType<'a>,
    /// Auto-incrementing row ID
    pub id: i64,
    #[serde(borrow)]
    pub pattern: crate::tools_ozone::safelink::PatternType<'a>,
    #[serde(borrow)]
    pub reason: crate::tools_ozone::safelink::ReasonType<'a>,
    /// The URL that this rule applies to
    #[serde(borrow)]
    pub url: jacquard_common::CowStr<'a>,
}

pub mod event_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Id;
        type EventType;
        type Url;
        type Pattern;
        type Action;
        type Reason;
        type CreatedBy;
        type CreatedAt;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Id = Unset;
        type EventType = Unset;
        type Url = Unset;
        type Pattern = Unset;
        type Action = Unset;
        type Reason = Unset;
        type CreatedBy = Unset;
        type CreatedAt = Unset;
    }
    ///State transition - sets the `id` field to Set
    pub struct SetId<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetId<S> {}
    impl<S: State> State for SetId<S> {
        type Id = Set<members::id>;
        type EventType = S::EventType;
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
    }
    ///State transition - sets the `event_type` field to Set
    pub struct SetEventType<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetEventType<S> {}
    impl<S: State> State for SetEventType<S> {
        type Id = S::Id;
        type EventType = Set<members::event_type>;
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
    }
    ///State transition - sets the `url` field to Set
    pub struct SetUrl<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetUrl<S> {}
    impl<S: State> State for SetUrl<S> {
        type Id = S::Id;
        type EventType = S::EventType;
        type Url = Set<members::url>;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
    }
    ///State transition - sets the `pattern` field to Set
    pub struct SetPattern<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetPattern<S> {}
    impl<S: State> State for SetPattern<S> {
        type Id = S::Id;
        type EventType = S::EventType;
        type Url = S::Url;
        type Pattern = Set<members::pattern>;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
    }
    ///State transition - sets the `action` field to Set
    pub struct SetAction<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetAction<S> {}
    impl<S: State> State for SetAction<S> {
        type Id = S::Id;
        type EventType = S::EventType;
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = Set<members::action>;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
    }
    ///State transition - sets the `reason` field to Set
    pub struct SetReason<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetReason<S> {}
    impl<S: State> State for SetReason<S> {
        type Id = S::Id;
        type EventType = S::EventType;
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = Set<members::reason>;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
    }
    ///State transition - sets the `created_by` field to Set
    pub struct SetCreatedBy<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetCreatedBy<S> {}
    impl<S: State> State for SetCreatedBy<S> {
        type Id = S::Id;
        type EventType = S::EventType;
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = Set<members::created_by>;
        type CreatedAt = S::CreatedAt;
    }
    ///State transition - sets the `created_at` field to Set
    pub struct SetCreatedAt<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetCreatedAt<S> {}
    impl<S: State> State for SetCreatedAt<S> {
        type Id = S::Id;
        type EventType = S::EventType;
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = Set<members::created_at>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `id` field
        pub struct id(());
        ///Marker type for the `event_type` field
        pub struct event_type(());
        ///Marker type for the `url` field
        pub struct url(());
        ///Marker type for the `pattern` field
        pub struct pattern(());
        ///Marker type for the `action` field
        pub struct action(());
        ///Marker type for the `reason` field
        pub struct reason(());
        ///Marker type for the `created_by` field
        pub struct created_by(());
        ///Marker type for the `created_at` field
        pub struct created_at(());
    }
}

/// Builder for constructing an instance of this type
pub struct EventBuilder<'a, S: event_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<crate::tools_ozone::safelink::ActionType<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::types::string::Datetime>,
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
        ::core::option::Option<crate::tools_ozone::safelink::EventType<'a>>,
        ::core::option::Option<i64>,
        ::core::option::Option<crate::tools_ozone::safelink::PatternType<'a>>,
        ::core::option::Option<crate::tools_ozone::safelink::ReasonType<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> Event<'a> {
    /// Create a new builder for this type
    pub fn new() -> EventBuilder<'a, event_state::Empty> {
        EventBuilder::new()
    }
}

impl<'a> EventBuilder<'a, event_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        EventBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
                None,
            ),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> EventBuilder<'a, S>
where
    S: event_state::State,
    S::Action: event_state::IsUnset,
{
    /// Set the `action` field (required)
    pub fn action(
        mut self,
        value: impl Into<crate::tools_ozone::safelink::ActionType<'a>>,
    ) -> EventBuilder<'a, event_state::SetAction<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        EventBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: event_state::State> EventBuilder<'a, S> {
    /// Set the `comment` field (optional)
    pub fn comment(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `comment` field to an Option value (optional)
    pub fn maybe_comment(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S> EventBuilder<'a, S>
where
    S: event_state::State,
    S::CreatedAt: event_state::IsUnset,
{
    /// Set the `createdAt` field (required)
    pub fn created_at(
        mut self,
        value: impl Into<jacquard_common::types::string::Datetime>,
    ) -> EventBuilder<'a, event_state::SetCreatedAt<S>> {
        self.__unsafe_private_named.2 = ::core::option::Option::Some(value.into());
        EventBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> EventBuilder<'a, S>
where
    S: event_state::State,
    S::CreatedBy: event_state::IsUnset,
{
    /// Set the `createdBy` field (required)
    pub fn created_by(
        mut self,
        value: impl Into<jacquard_common::types::string::Did<'a>>,
    ) -> EventBuilder<'a, event_state::SetCreatedBy<S>> {
        self.__unsafe_private_named.3 = ::core::option::Option::Some(value.into());
        EventBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> EventBuilder<'a, S>
where
    S: event_state::State,
    S::EventType: event_state::IsUnset,
{
    /// Set the `eventType` field (required)
    pub fn event_type(
        mut self,
        value: impl Into<crate::tools_ozone::safelink::EventType<'a>>,
    ) -> EventBuilder<'a, event_state::SetEventType<S>> {
        self.__unsafe_private_named.4 = ::core::option::Option::Some(value.into());
        EventBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> EventBuilder<'a, S>
where
    S: event_state::State,
    S::Id: event_state::IsUnset,
{
    /// Set the `id` field (required)
    pub fn id(
        mut self,
        value: impl Into<i64>,
    ) -> EventBuilder<'a, event_state::SetId<S>> {
        self.__unsafe_private_named.5 = ::core::option::Option::Some(value.into());
        EventBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> EventBuilder<'a, S>
where
    S: event_state::State,
    S::Pattern: event_state::IsUnset,
{
    /// Set the `pattern` field (required)
    pub fn pattern(
        mut self,
        value: impl Into<crate::tools_ozone::safelink::PatternType<'a>>,
    ) -> EventBuilder<'a, event_state::SetPattern<S>> {
        self.__unsafe_private_named.6 = ::core::option::Option::Some(value.into());
        EventBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> EventBuilder<'a, S>
where
    S: event_state::State,
    S::Reason: event_state::IsUnset,
{
    /// Set the `reason` field (required)
    pub fn reason(
        mut self,
        value: impl Into<crate::tools_ozone::safelink::ReasonType<'a>>,
    ) -> EventBuilder<'a, event_state::SetReason<S>> {
        self.__unsafe_private_named.7 = ::core::option::Option::Some(value.into());
        EventBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> EventBuilder<'a, S>
where
    S: event_state::State,
    S::Url: event_state::IsUnset,
{
    /// Set the `url` field (required)
    pub fn url(
        mut self,
        value: impl Into<jacquard_common::CowStr<'a>>,
    ) -> EventBuilder<'a, event_state::SetUrl<S>> {
        self.__unsafe_private_named.8 = ::core::option::Option::Some(value.into());
        EventBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> EventBuilder<'a, S>
where
    S: event_state::State,
    S::Id: event_state::IsSet,
    S::EventType: event_state::IsSet,
    S::Url: event_state::IsSet,
    S::Pattern: event_state::IsSet,
    S::Action: event_state::IsSet,
    S::Reason: event_state::IsSet,
    S::CreatedBy: event_state::IsSet,
    S::CreatedAt: event_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> Event<'a> {
        Event {
            action: self.__unsafe_private_named.0.unwrap(),
            comment: self.__unsafe_private_named.1,
            created_at: self.__unsafe_private_named.2.unwrap(),
            created_by: self.__unsafe_private_named.3.unwrap(),
            event_type: self.__unsafe_private_named.4.unwrap(),
            id: self.__unsafe_private_named.5.unwrap(),
            pattern: self.__unsafe_private_named.6.unwrap(),
            reason: self.__unsafe_private_named.7.unwrap(),
            url: self.__unsafe_private_named.8.unwrap(),
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> Event<'a> {
        Event {
            action: self.__unsafe_private_named.0.unwrap(),
            comment: self.__unsafe_private_named.1,
            created_at: self.__unsafe_private_named.2.unwrap(),
            created_by: self.__unsafe_private_named.3.unwrap(),
            event_type: self.__unsafe_private_named.4.unwrap(),
            id: self.__unsafe_private_named.5.unwrap(),
            pattern: self.__unsafe_private_named.6.unwrap(),
            reason: self.__unsafe_private_named.7.unwrap(),
            url: self.__unsafe_private_named.8.unwrap(),
            extra_data: Some(extra_data),
        }
    }
}

fn lexicon_doc_tools_ozone_safelink_defs() -> ::jacquard_lexicon::lexicon::LexiconDoc<
    'static,
> {
    ::jacquard_lexicon::lexicon::LexiconDoc {
        lexicon: ::jacquard_lexicon::lexicon::Lexicon::Lexicon1,
        id: ::jacquard_common::CowStr::new_static("tools.ozone.safelink.defs"),
        revision: None,
        description: None,
        defs: {
            let mut map = ::std::collections::BTreeMap::new();
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("actionType"),
                ::jacquard_lexicon::lexicon::LexUserType::String(::jacquard_lexicon::lexicon::LexString {
                    description: None,
                    format: None,
                    default: None,
                    min_length: None,
                    max_length: None,
                    min_graphemes: None,
                    max_graphemes: None,
                    r#enum: None,
                    r#const: None,
                    known_values: None,
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("event"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: Some(
                        ::jacquard_common::CowStr::new_static(
                            "An event for URL safety decisions",
                        ),
                    ),
                    required: Some(
                        vec![
                            ::jacquard_common::smol_str::SmolStr::new_static("id"),
                            ::jacquard_common::smol_str::SmolStr::new_static("eventType"),
                            ::jacquard_common::smol_str::SmolStr::new_static("url"),
                            ::jacquard_common::smol_str::SmolStr::new_static("pattern"),
                            ::jacquard_common::smol_str::SmolStr::new_static("action"),
                            ::jacquard_common::smol_str::SmolStr::new_static("reason"),
                            ::jacquard_common::smol_str::SmolStr::new_static("createdBy"),
                            ::jacquard_common::smol_str::SmolStr::new_static("createdAt")
                        ],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("action"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static("#actionType"),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("comment"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "Optional comment about the decision",
                                    ),
                                ),
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "createdAt",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: None,
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Datetime,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "createdBy",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "DID of the user who created this rule",
                                    ),
                                ),
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Did,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "eventType",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static("#eventType"),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("id"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Integer(::jacquard_lexicon::lexicon::LexInteger {
                                description: None,
                                default: None,
                                minimum: None,
                                maximum: None,
                                r#enum: None,
                                r#const: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("pattern"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static("#patternType"),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("reason"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static("#reasonType"),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("url"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "The URL that this rule applies to",
                                    ),
                                ),
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map
                    },
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("eventType"),
                ::jacquard_lexicon::lexicon::LexUserType::String(::jacquard_lexicon::lexicon::LexString {
                    description: None,
                    format: None,
                    default: None,
                    min_length: None,
                    max_length: None,
                    min_graphemes: None,
                    max_graphemes: None,
                    r#enum: None,
                    r#const: None,
                    known_values: None,
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("patternType"),
                ::jacquard_lexicon::lexicon::LexUserType::String(::jacquard_lexicon::lexicon::LexString {
                    description: None,
                    format: None,
                    default: None,
                    min_length: None,
                    max_length: None,
                    min_graphemes: None,
                    max_graphemes: None,
                    r#enum: None,
                    r#const: None,
                    known_values: None,
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("reasonType"),
                ::jacquard_lexicon::lexicon::LexUserType::String(::jacquard_lexicon::lexicon::LexString {
                    description: None,
                    format: None,
                    default: None,
                    min_length: None,
                    max_length: None,
                    min_graphemes: None,
                    max_graphemes: None,
                    r#enum: None,
                    r#const: None,
                    known_values: None,
                }),
            );
            map.insert(
                ::jacquard_common::smol_str::SmolStr::new_static("urlRule"),
                ::jacquard_lexicon::lexicon::LexUserType::Object(::jacquard_lexicon::lexicon::LexObject {
                    description: Some(
                        ::jacquard_common::CowStr::new_static(
                            "Input for creating a URL safety rule",
                        ),
                    ),
                    required: Some(
                        vec![
                            ::jacquard_common::smol_str::SmolStr::new_static("url"),
                            ::jacquard_common::smol_str::SmolStr::new_static("pattern"),
                            ::jacquard_common::smol_str::SmolStr::new_static("action"),
                            ::jacquard_common::smol_str::SmolStr::new_static("reason"),
                            ::jacquard_common::smol_str::SmolStr::new_static("createdBy"),
                            ::jacquard_common::smol_str::SmolStr::new_static("createdAt"),
                            ::jacquard_common::smol_str::SmolStr::new_static("updatedAt")
                        ],
                    ),
                    nullable: None,
                    properties: {
                        #[allow(unused_mut)]
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("action"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static("#actionType"),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("comment"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "Optional comment about the decision",
                                    ),
                                ),
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "createdAt",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "Timestamp when the rule was created",
                                    ),
                                ),
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Datetime,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "createdBy",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "DID of the user added the rule.",
                                    ),
                                ),
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Did,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("pattern"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static("#patternType"),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("reason"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::Ref(::jacquard_lexicon::lexicon::LexRef {
                                description: None,
                                r#ref: ::jacquard_common::CowStr::new_static("#reasonType"),
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static(
                                "updatedAt",
                            ),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "Timestamp when the rule was last updated",
                                    ),
                                ),
                                format: Some(
                                    ::jacquard_lexicon::lexicon::LexStringFormat::Datetime,
                                ),
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map.insert(
                            ::jacquard_common::smol_str::SmolStr::new_static("url"),
                            ::jacquard_lexicon::lexicon::LexObjectProperty::String(::jacquard_lexicon::lexicon::LexString {
                                description: Some(
                                    ::jacquard_common::CowStr::new_static(
                                        "The URL or domain to apply the rule to",
                                    ),
                                ),
                                format: None,
                                default: None,
                                min_length: None,
                                max_length: None,
                                min_graphemes: None,
                                max_graphemes: None,
                                r#enum: None,
                                r#const: None,
                                known_values: None,
                            }),
                        );
                        map
                    },
                }),
            );
            map
        },
    }
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for Event<'a> {
    fn nsid() -> &'static str {
        "tools.ozone.safelink.defs"
    }
    fn def_name() -> &'static str {
        "event"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_tools_ozone_safelink_defs()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        Ok(())
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum EventType<'a> {
    AddRule,
    UpdateRule,
    RemoveRule,
    Other(jacquard_common::CowStr<'a>),
}

impl<'a> EventType<'a> {
    pub fn as_str(&self) -> &str {
        match self {
            Self::AddRule => "addRule",
            Self::UpdateRule => "updateRule",
            Self::RemoveRule => "removeRule",
            Self::Other(s) => s.as_ref(),
        }
    }
}

impl<'a> From<&'a str> for EventType<'a> {
    fn from(s: &'a str) -> Self {
        match s {
            "addRule" => Self::AddRule,
            "updateRule" => Self::UpdateRule,
            "removeRule" => Self::RemoveRule,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> From<String> for EventType<'a> {
    fn from(s: String) -> Self {
        match s.as_str() {
            "addRule" => Self::AddRule,
            "updateRule" => Self::UpdateRule,
            "removeRule" => Self::RemoveRule,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> AsRef<str> for EventType<'a> {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

impl<'a> serde::Serialize for EventType<'a> {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de, 'a> serde::Deserialize<'de> for EventType<'a>
where
    'de: 'a,
{
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = <&'de str>::deserialize(deserializer)?;
        Ok(Self::from(s))
    }
}

impl jacquard_common::IntoStatic for EventType<'_> {
    type Output = EventType<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            EventType::AddRule => EventType::AddRule,
            EventType::UpdateRule => EventType::UpdateRule,
            EventType::RemoveRule => EventType::RemoveRule,
            EventType::Other(v) => EventType::Other(v.into_static()),
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum PatternType<'a> {
    Domain,
    Url,
    Other(jacquard_common::CowStr<'a>),
}

impl<'a> PatternType<'a> {
    pub fn as_str(&self) -> &str {
        match self {
            Self::Domain => "domain",
            Self::Url => "url",
            Self::Other(s) => s.as_ref(),
        }
    }
}

impl<'a> From<&'a str> for PatternType<'a> {
    fn from(s: &'a str) -> Self {
        match s {
            "domain" => Self::Domain,
            "url" => Self::Url,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> From<String> for PatternType<'a> {
    fn from(s: String) -> Self {
        match s.as_str() {
            "domain" => Self::Domain,
            "url" => Self::Url,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> AsRef<str> for PatternType<'a> {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

impl<'a> serde::Serialize for PatternType<'a> {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de, 'a> serde::Deserialize<'de> for PatternType<'a>
where
    'de: 'a,
{
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = <&'de str>::deserialize(deserializer)?;
        Ok(Self::from(s))
    }
}

impl jacquard_common::IntoStatic for PatternType<'_> {
    type Output = PatternType<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            PatternType::Domain => PatternType::Domain,
            PatternType::Url => PatternType::Url,
            PatternType::Other(v) => PatternType::Other(v.into_static()),
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ReasonType<'a> {
    Csam,
    Spam,
    Phishing,
    None,
    Other(jacquard_common::CowStr<'a>),
}

impl<'a> ReasonType<'a> {
    pub fn as_str(&self) -> &str {
        match self {
            Self::Csam => "csam",
            Self::Spam => "spam",
            Self::Phishing => "phishing",
            Self::None => "none",
            Self::Other(s) => s.as_ref(),
        }
    }
}

impl<'a> From<&'a str> for ReasonType<'a> {
    fn from(s: &'a str) -> Self {
        match s {
            "csam" => Self::Csam,
            "spam" => Self::Spam,
            "phishing" => Self::Phishing,
            "none" => Self::None,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> From<String> for ReasonType<'a> {
    fn from(s: String) -> Self {
        match s.as_str() {
            "csam" => Self::Csam,
            "spam" => Self::Spam,
            "phishing" => Self::Phishing,
            "none" => Self::None,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> AsRef<str> for ReasonType<'a> {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

impl<'a> serde::Serialize for ReasonType<'a> {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de, 'a> serde::Deserialize<'de> for ReasonType<'a>
where
    'de: 'a,
{
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = <&'de str>::deserialize(deserializer)?;
        Ok(Self::from(s))
    }
}

impl jacquard_common::IntoStatic for ReasonType<'_> {
    type Output = ReasonType<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ReasonType::Csam => ReasonType::Csam,
            ReasonType::Spam => ReasonType::Spam,
            ReasonType::Phishing => ReasonType::Phishing,
            ReasonType::None => ReasonType::None,
            ReasonType::Other(v) => ReasonType::Other(v.into_static()),
        }
    }
}

/// Input for creating a URL safety rule
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct UrlRule<'a> {
    #[serde(borrow)]
    pub action: crate::tools_ozone::safelink::ActionType<'a>,
    /// Optional comment about the decision
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub comment: Option<jacquard_common::CowStr<'a>>,
    /// Timestamp when the rule was created
    pub created_at: jacquard_common::types::string::Datetime,
    /// DID of the user added the rule.
    #[serde(borrow)]
    pub created_by: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub pattern: crate::tools_ozone::safelink::PatternType<'a>,
    #[serde(borrow)]
    pub reason: crate::tools_ozone::safelink::ReasonType<'a>,
    /// Timestamp when the rule was last updated
    pub updated_at: jacquard_common::types::string::Datetime,
    /// The URL or domain to apply the rule to
    #[serde(borrow)]
    pub url: jacquard_common::CowStr<'a>,
}

pub mod url_rule_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {
        type Url;
        type Pattern;
        type Action;
        type Reason;
        type CreatedBy;
        type CreatedAt;
        type UpdatedAt;
    }
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {
        type Url = Unset;
        type Pattern = Unset;
        type Action = Unset;
        type Reason = Unset;
        type CreatedBy = Unset;
        type CreatedAt = Unset;
        type UpdatedAt = Unset;
    }
    ///State transition - sets the `url` field to Set
    pub struct SetUrl<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetUrl<S> {}
    impl<S: State> State for SetUrl<S> {
        type Url = Set<members::url>;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
        type UpdatedAt = S::UpdatedAt;
    }
    ///State transition - sets the `pattern` field to Set
    pub struct SetPattern<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetPattern<S> {}
    impl<S: State> State for SetPattern<S> {
        type Url = S::Url;
        type Pattern = Set<members::pattern>;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
        type UpdatedAt = S::UpdatedAt;
    }
    ///State transition - sets the `action` field to Set
    pub struct SetAction<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetAction<S> {}
    impl<S: State> State for SetAction<S> {
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = Set<members::action>;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
        type UpdatedAt = S::UpdatedAt;
    }
    ///State transition - sets the `reason` field to Set
    pub struct SetReason<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetReason<S> {}
    impl<S: State> State for SetReason<S> {
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = Set<members::reason>;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
        type UpdatedAt = S::UpdatedAt;
    }
    ///State transition - sets the `created_by` field to Set
    pub struct SetCreatedBy<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetCreatedBy<S> {}
    impl<S: State> State for SetCreatedBy<S> {
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = Set<members::created_by>;
        type CreatedAt = S::CreatedAt;
        type UpdatedAt = S::UpdatedAt;
    }
    ///State transition - sets the `created_at` field to Set
    pub struct SetCreatedAt<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetCreatedAt<S> {}
    impl<S: State> State for SetCreatedAt<S> {
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = Set<members::created_at>;
        type UpdatedAt = S::UpdatedAt;
    }
    ///State transition - sets the `updated_at` field to Set
    pub struct SetUpdatedAt<S: State = Empty>(PhantomData<fn() -> S>);
    impl<S: State> sealed::Sealed for SetUpdatedAt<S> {}
    impl<S: State> State for SetUpdatedAt<S> {
        type Url = S::Url;
        type Pattern = S::Pattern;
        type Action = S::Action;
        type Reason = S::Reason;
        type CreatedBy = S::CreatedBy;
        type CreatedAt = S::CreatedAt;
        type UpdatedAt = Set<members::updated_at>;
    }
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {
        ///Marker type for the `url` field
        pub struct url(());
        ///Marker type for the `pattern` field
        pub struct pattern(());
        ///Marker type for the `action` field
        pub struct action(());
        ///Marker type for the `reason` field
        pub struct reason(());
        ///Marker type for the `created_by` field
        pub struct created_by(());
        ///Marker type for the `created_at` field
        pub struct created_at(());
        ///Marker type for the `updated_at` field
        pub struct updated_at(());
    }
}

/// Builder for constructing an instance of this type
pub struct UrlRuleBuilder<'a, S: url_rule_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<crate::tools_ozone::safelink::ActionType<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::types::string::Datetime>,
        ::core::option::Option<jacquard_common::types::string::Did<'a>>,
        ::core::option::Option<crate::tools_ozone::safelink::PatternType<'a>>,
        ::core::option::Option<crate::tools_ozone::safelink::ReasonType<'a>>,
        ::core::option::Option<jacquard_common::types::string::Datetime>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> UrlRule<'a> {
    /// Create a new builder for this type
    pub fn new() -> UrlRuleBuilder<'a, url_rule_state::Empty> {
        UrlRuleBuilder::new()
    }
}

impl<'a> UrlRuleBuilder<'a, url_rule_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        UrlRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None, None, None, None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> UrlRuleBuilder<'a, S>
where
    S: url_rule_state::State,
    S::Action: url_rule_state::IsUnset,
{
    /// Set the `action` field (required)
    pub fn action(
        mut self,
        value: impl Into<crate::tools_ozone::safelink::ActionType<'a>>,
    ) -> UrlRuleBuilder<'a, url_rule_state::SetAction<S>> {
        self.__unsafe_private_named.0 = ::core::option::Option::Some(value.into());
        UrlRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: url_rule_state::State> UrlRuleBuilder<'a, S> {
    /// Set the `comment` field (optional)
    pub fn comment(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `comment` field to an Option value (optional)
    pub fn maybe_comment(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S> UrlRuleBuilder<'a, S>
where
    S: url_rule_state::State,
    S::CreatedAt: url_rule_state::IsUnset,
{
    /// Set the `createdAt` field (required)
    pub fn created_at(
        mut self,
        value: impl Into<jacquard_common::types::string::Datetime>,
    ) -> UrlRuleBuilder<'a, url_rule_state::SetCreatedAt<S>> {
        self.__unsafe_private_named.2 = ::core::option::Option::Some(value.into());
        UrlRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> UrlRuleBuilder<'a, S>
where
    S: url_rule_state::State,
    S::CreatedBy: url_rule_state::IsUnset,
{
    /// Set the `createdBy` field (required)
    pub fn created_by(
        mut self,
        value: impl Into<jacquard_common::types::string::Did<'a>>,
    ) -> UrlRuleBuilder<'a, url_rule_state::SetCreatedBy<S>> {
        self.__unsafe_private_named.3 = ::core::option::Option::Some(value.into());
        UrlRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> UrlRuleBuilder<'a, S>
where
    S: url_rule_state::State,
    S::Pattern: url_rule_state::IsUnset,
{
    /// Set the `pattern` field (required)
    pub fn pattern(
        mut self,
        value: impl Into<crate::tools_ozone::safelink::PatternType<'a>>,
    ) -> UrlRuleBuilder<'a, url_rule_state::SetPattern<S>> {
        self.__unsafe_private_named.4 = ::core::option::Option::Some(value.into());
        UrlRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> UrlRuleBuilder<'a, S>
where
    S: url_rule_state::State,
    S::Reason: url_rule_state::IsUnset,
{
    /// Set the `reason` field (required)
    pub fn reason(
        mut self,
        value: impl Into<crate::tools_ozone::safelink::ReasonType<'a>>,
    ) -> UrlRuleBuilder<'a, url_rule_state::SetReason<S>> {
        self.__unsafe_private_named.5 = ::core::option::Option::Some(value.into());
        UrlRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> UrlRuleBuilder<'a, S>
where
    S: url_rule_state::State,
    S::UpdatedAt: url_rule_state::IsUnset,
{
    /// Set the `updatedAt` field (required)
    pub fn updated_at(
        mut self,
        value: impl Into<jacquard_common::types::string::Datetime>,
    ) -> UrlRuleBuilder<'a, url_rule_state::SetUpdatedAt<S>> {
        self.__unsafe_private_named.6 = ::core::option::Option::Some(value.into());
        UrlRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> UrlRuleBuilder<'a, S>
where
    S: url_rule_state::State,
    S::Url: url_rule_state::IsUnset,
{
    /// Set the `url` field (required)
    pub fn url(
        mut self,
        value: impl Into<jacquard_common::CowStr<'a>>,
    ) -> UrlRuleBuilder<'a, url_rule_state::SetUrl<S>> {
        self.__unsafe_private_named.7 = ::core::option::Option::Some(value.into());
        UrlRuleBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: self.__unsafe_private_named,
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S> UrlRuleBuilder<'a, S>
where
    S: url_rule_state::State,
    S::Url: url_rule_state::IsSet,
    S::Pattern: url_rule_state::IsSet,
    S::Action: url_rule_state::IsSet,
    S::Reason: url_rule_state::IsSet,
    S::CreatedBy: url_rule_state::IsSet,
    S::CreatedAt: url_rule_state::IsSet,
    S::UpdatedAt: url_rule_state::IsSet,
{
    /// Build the final struct
    pub fn build(self) -> UrlRule<'a> {
        UrlRule {
            action: self.__unsafe_private_named.0.unwrap(),
            comment: self.__unsafe_private_named.1,
            created_at: self.__unsafe_private_named.2.unwrap(),
            created_by: self.__unsafe_private_named.3.unwrap(),
            pattern: self.__unsafe_private_named.4.unwrap(),
            reason: self.__unsafe_private_named.5.unwrap(),
            updated_at: self.__unsafe_private_named.6.unwrap(),
            url: self.__unsafe_private_named.7.unwrap(),
            extra_data: Default::default(),
        }
    }
    /// Build the final struct with custom extra_data
    pub fn build_with_data(
        self,
        extra_data: std::collections::BTreeMap<
            jacquard_common::smol_str::SmolStr,
            jacquard_common::types::value::Data<'a>,
        >,
    ) -> UrlRule<'a> {
        UrlRule {
            action: self.__unsafe_private_named.0.unwrap(),
            comment: self.__unsafe_private_named.1,
            created_at: self.__unsafe_private_named.2.unwrap(),
            created_by: self.__unsafe_private_named.3.unwrap(),
            pattern: self.__unsafe_private_named.4.unwrap(),
            reason: self.__unsafe_private_named.5.unwrap(),
            updated_at: self.__unsafe_private_named.6.unwrap(),
            url: self.__unsafe_private_named.7.unwrap(),
            extra_data: Some(extra_data),
        }
    }
}

impl<'a> ::jacquard_lexicon::schema::LexiconSchema for UrlRule<'a> {
    fn nsid() -> &'static str {
        "tools.ozone.safelink.defs"
    }
    fn def_name() -> &'static str {
        "urlRule"
    }
    fn lexicon_doc() -> ::jacquard_lexicon::lexicon::LexiconDoc<'static> {
        lexicon_doc_tools_ozone_safelink_defs()
    }
    fn validate(
        &self,
    ) -> ::std::result::Result<(), ::jacquard_lexicon::validation::ConstraintError> {
        Ok(())
    }
}