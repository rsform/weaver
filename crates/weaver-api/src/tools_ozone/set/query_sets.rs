// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.set.querySets
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct QuerySets<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub name_prefix: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: "name")
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sort_by: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: "asc")
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sort_direction: std::option::Option<jacquard_common::CowStr<'a>>,
}

pub mod query_sets_state {

    pub use crate::builder_types::{Set, Unset, IsSet, IsUnset};
    #[allow(unused)]
    use ::core::marker::PhantomData;
    mod sealed {
        pub trait Sealed {}
    }
    /// State trait tracking which required fields have been set
    pub trait State: sealed::Sealed {}
    /// Empty state - all required fields are unset
    pub struct Empty(());
    impl sealed::Sealed for Empty {}
    impl State for Empty {}
    /// Marker types for field names
    #[allow(non_camel_case_types)]
    pub mod members {}
}

/// Builder for constructing an instance of this type
pub struct QuerySetsBuilder<'a, S: query_sets_state::State> {
    _phantom_state: ::core::marker::PhantomData<fn() -> S>,
    __unsafe_private_named: (
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<i64>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
        ::core::option::Option<jacquard_common::CowStr<'a>>,
    ),
    _phantom: ::core::marker::PhantomData<&'a ()>,
}

impl<'a> QuerySets<'a> {
    /// Create a new builder for this type
    pub fn new() -> QuerySetsBuilder<'a, query_sets_state::Empty> {
        QuerySetsBuilder::new()
    }
}

impl<'a> QuerySetsBuilder<'a, query_sets_state::Empty> {
    /// Create a new builder with all fields unset
    pub fn new() -> Self {
        QuerySetsBuilder {
            _phantom_state: ::core::marker::PhantomData,
            __unsafe_private_named: (None, None, None, None, None),
            _phantom: ::core::marker::PhantomData,
        }
    }
}

impl<'a, S: query_sets_state::State> QuerySetsBuilder<'a, S> {
    /// Set the `cursor` field (optional)
    pub fn cursor(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.0 = value.into();
        self
    }
    /// Set the `cursor` field to an Option value (optional)
    pub fn maybe_cursor(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.0 = value;
        self
    }
}

impl<'a, S: query_sets_state::State> QuerySetsBuilder<'a, S> {
    /// Set the `limit` field (optional)
    pub fn limit(mut self, value: impl Into<Option<i64>>) -> Self {
        self.__unsafe_private_named.1 = value.into();
        self
    }
    /// Set the `limit` field to an Option value (optional)
    pub fn maybe_limit(mut self, value: Option<i64>) -> Self {
        self.__unsafe_private_named.1 = value;
        self
    }
}

impl<'a, S: query_sets_state::State> QuerySetsBuilder<'a, S> {
    /// Set the `namePrefix` field (optional)
    pub fn name_prefix(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.2 = value.into();
        self
    }
    /// Set the `namePrefix` field to an Option value (optional)
    pub fn maybe_name_prefix(
        mut self,
        value: Option<jacquard_common::CowStr<'a>>,
    ) -> Self {
        self.__unsafe_private_named.2 = value;
        self
    }
}

impl<'a, S: query_sets_state::State> QuerySetsBuilder<'a, S> {
    /// Set the `sortBy` field (optional)
    pub fn sort_by(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.3 = value.into();
        self
    }
    /// Set the `sortBy` field to an Option value (optional)
    pub fn maybe_sort_by(mut self, value: Option<jacquard_common::CowStr<'a>>) -> Self {
        self.__unsafe_private_named.3 = value;
        self
    }
}

impl<'a, S: query_sets_state::State> QuerySetsBuilder<'a, S> {
    /// Set the `sortDirection` field (optional)
    pub fn sort_direction(
        mut self,
        value: impl Into<Option<jacquard_common::CowStr<'a>>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value.into();
        self
    }
    /// Set the `sortDirection` field to an Option value (optional)
    pub fn maybe_sort_direction(
        mut self,
        value: Option<jacquard_common::CowStr<'a>>,
    ) -> Self {
        self.__unsafe_private_named.4 = value;
        self
    }
}

impl<'a, S> QuerySetsBuilder<'a, S>
where
    S: query_sets_state::State,
{
    /// Build the final struct
    pub fn build(self) -> QuerySets<'a> {
        QuerySets {
            cursor: self.__unsafe_private_named.0,
            limit: self.__unsafe_private_named.1,
            name_prefix: self.__unsafe_private_named.2,
            sort_by: self.__unsafe_private_named.3,
            sort_direction: self.__unsafe_private_named.4,
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct QuerySetsOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub sets: Vec<crate::tools_ozone::set::SetView<'a>>,
}

/// Response type for
///tools.ozone.set.querySets
pub struct QuerySetsResponse;
impl jacquard_common::xrpc::XrpcResp for QuerySetsResponse {
    const NSID: &'static str = "tools.ozone.set.querySets";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = QuerySetsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for QuerySets<'a> {
    const NSID: &'static str = "tools.ozone.set.querySets";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = QuerySetsResponse;
}

/// Endpoint type for
///tools.ozone.set.querySets
pub struct QuerySetsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for QuerySetsRequest {
    const PATH: &'static str = "/xrpc/tools.ozone.set.querySets";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = QuerySets<'de>;
    type Response = QuerySetsResponse;
}