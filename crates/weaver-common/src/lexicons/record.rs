// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!A collection of known record types.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum KnownRecord {
    #[serde(rename = "app.bsky.actor.profile")]
    LexiconsAppBskyActorProfile(Box<crate::lexicons::app::bsky::actor::profile::Record>),
    #[serde(rename = "app.bsky.actor.status")]
    LexiconsAppBskyActorStatus(Box<crate::lexicons::app::bsky::actor::status::Record>),
    #[serde(rename = "app.bsky.feed.generator")]
    LexiconsAppBskyFeedGenerator(Box<crate::lexicons::app::bsky::feed::generator::Record>),
    #[serde(rename = "app.bsky.feed.like")]
    LexiconsAppBskyFeedLike(Box<crate::lexicons::app::bsky::feed::like::Record>),
    #[serde(rename = "app.bsky.feed.post")]
    LexiconsAppBskyFeedPost(Box<crate::lexicons::app::bsky::feed::post::Record>),
    #[serde(rename = "app.bsky.feed.postgate")]
    LexiconsAppBskyFeedPostgate(Box<crate::lexicons::app::bsky::feed::postgate::Record>),
    #[serde(rename = "app.bsky.feed.repost")]
    LexiconsAppBskyFeedRepost(Box<crate::lexicons::app::bsky::feed::repost::Record>),
    #[serde(rename = "app.bsky.feed.threadgate")]
    LexiconsAppBskyFeedThreadgate(Box<crate::lexicons::app::bsky::feed::threadgate::Record>),
    #[serde(rename = "app.bsky.graph.block")]
    LexiconsAppBskyGraphBlock(Box<crate::lexicons::app::bsky::graph::block::Record>),
    #[serde(rename = "app.bsky.graph.follow")]
    LexiconsAppBskyGraphFollow(Box<crate::lexicons::app::bsky::graph::follow::Record>),
    #[serde(rename = "app.bsky.graph.list")]
    LexiconsAppBskyGraphList(Box<crate::lexicons::app::bsky::graph::list::Record>),
    #[serde(rename = "app.bsky.graph.listblock")]
    LexiconsAppBskyGraphListblock(Box<crate::lexicons::app::bsky::graph::listblock::Record>),
    #[serde(rename = "app.bsky.graph.listitem")]
    LexiconsAppBskyGraphListitem(Box<crate::lexicons::app::bsky::graph::listitem::Record>),
    #[serde(rename = "app.bsky.graph.starterpack")]
    LexiconsAppBskyGraphStarterpack(Box<crate::lexicons::app::bsky::graph::starterpack::Record>),
    #[serde(rename = "app.bsky.graph.verification")]
    LexiconsAppBskyGraphVerification(Box<crate::lexicons::app::bsky::graph::verification::Record>),
    #[serde(rename = "app.bsky.labeler.service")]
    LexiconsAppBskyLabelerService(Box<crate::lexicons::app::bsky::labeler::service::Record>),
    #[serde(rename = "chat.bsky.actor.declaration")]
    LexiconsChatBskyActorDeclaration(Box<crate::lexicons::chat::bsky::actor::declaration::Record>),
    #[serde(rename = "com.atproto.lexicon.schema")]
    LexiconsComAtprotoLexiconSchema(Box<crate::lexicons::com::atproto::lexicon::schema::Record>),
    #[serde(rename = "place.stream.live.profile")]
    LexiconsPlaceStreamLiveProfile(Box<crate::lexicons::place::stream::live::profile::Record>),
    #[serde(rename = "sh.tangled.actor.profile")]
    LexiconsShTangledActorProfile(Box<crate::lexicons::sh::tangled::actor::profile::Record>),
    #[serde(rename = "sh.weaver.actor.profile")]
    LexiconsShWeaverActorProfile(Box<crate::lexicons::sh::weaver::actor::profile::Record>),
    #[serde(rename = "sh.weaver.edit.cursor")]
    LexiconsShWeaverEditCursor(Box<crate::lexicons::sh::weaver::edit::cursor::Record>),
    #[serde(rename = "sh.weaver.edit.diff")]
    LexiconsShWeaverEditDiff(Box<crate::lexicons::sh::weaver::edit::diff::Record>),
    #[serde(rename = "sh.weaver.edit.root")]
    LexiconsShWeaverEditRoot(Box<crate::lexicons::sh::weaver::edit::root::Record>),
    #[serde(rename = "sh.weaver.notebook.authors")]
    LexiconsShWeaverNotebookAuthors(Box<crate::lexicons::sh::weaver::notebook::authors::Record>),
    #[serde(rename = "sh.weaver.notebook.book")]
    LexiconsShWeaverNotebookBook(Box<crate::lexicons::sh::weaver::notebook::book::Record>),
    #[serde(rename = "sh.weaver.notebook.chapter")]
    LexiconsShWeaverNotebookChapter(Box<crate::lexicons::sh::weaver::notebook::chapter::Record>),
    #[serde(rename = "sh.weaver.notebook.entry")]
    LexiconsShWeaverNotebookEntry(Box<crate::lexicons::sh::weaver::notebook::entry::Record>),
    #[serde(rename = "sh.weaver.publish.blob")]
    LexiconsShWeaverPublishBlob(Box<crate::lexicons::sh::weaver::publish::blob::Record>),
}
impl From<crate::lexicons::app::bsky::actor::profile::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::actor::profile::Record) -> Self {
        KnownRecord::LexiconsAppBskyActorProfile(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::actor::profile::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::actor::profile::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyActorProfile(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::actor::status::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::actor::status::Record) -> Self {
        KnownRecord::LexiconsAppBskyActorStatus(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::actor::status::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::actor::status::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyActorStatus(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::feed::generator::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::feed::generator::Record) -> Self {
        KnownRecord::LexiconsAppBskyFeedGenerator(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::feed::generator::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::feed::generator::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyFeedGenerator(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::feed::like::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::feed::like::Record) -> Self {
        KnownRecord::LexiconsAppBskyFeedLike(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::feed::like::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::feed::like::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyFeedLike(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::feed::post::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::feed::post::Record) -> Self {
        KnownRecord::LexiconsAppBskyFeedPost(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::feed::post::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::feed::post::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyFeedPost(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::feed::postgate::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::feed::postgate::Record) -> Self {
        KnownRecord::LexiconsAppBskyFeedPostgate(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::feed::postgate::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::feed::postgate::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyFeedPostgate(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::feed::repost::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::feed::repost::Record) -> Self {
        KnownRecord::LexiconsAppBskyFeedRepost(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::feed::repost::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::feed::repost::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyFeedRepost(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::feed::threadgate::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::feed::threadgate::Record) -> Self {
        KnownRecord::LexiconsAppBskyFeedThreadgate(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::feed::threadgate::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::feed::threadgate::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyFeedThreadgate(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::graph::block::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::graph::block::Record) -> Self {
        KnownRecord::LexiconsAppBskyGraphBlock(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::graph::block::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::graph::block::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyGraphBlock(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::graph::follow::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::graph::follow::Record) -> Self {
        KnownRecord::LexiconsAppBskyGraphFollow(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::graph::follow::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::graph::follow::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyGraphFollow(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::graph::list::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::graph::list::Record) -> Self {
        KnownRecord::LexiconsAppBskyGraphList(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::graph::list::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::graph::list::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyGraphList(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::graph::listblock::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::graph::listblock::Record) -> Self {
        KnownRecord::LexiconsAppBskyGraphListblock(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::graph::listblock::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::graph::listblock::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyGraphListblock(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::graph::listitem::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::graph::listitem::Record) -> Self {
        KnownRecord::LexiconsAppBskyGraphListitem(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::graph::listitem::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::graph::listitem::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyGraphListitem(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::graph::starterpack::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::graph::starterpack::Record) -> Self {
        KnownRecord::LexiconsAppBskyGraphStarterpack(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::graph::starterpack::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::graph::starterpack::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyGraphStarterpack(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::graph::verification::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::graph::verification::Record) -> Self {
        KnownRecord::LexiconsAppBskyGraphVerification(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::graph::verification::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::graph::verification::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyGraphVerification(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::app::bsky::labeler::service::Record> for KnownRecord {
    fn from(record: crate::lexicons::app::bsky::labeler::service::Record) -> Self {
        KnownRecord::LexiconsAppBskyLabelerService(Box::new(record))
    }
}
impl From<crate::lexicons::app::bsky::labeler::service::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::app::bsky::labeler::service::RecordData) -> Self {
        KnownRecord::LexiconsAppBskyLabelerService(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::chat::bsky::actor::declaration::Record> for KnownRecord {
    fn from(record: crate::lexicons::chat::bsky::actor::declaration::Record) -> Self {
        KnownRecord::LexiconsChatBskyActorDeclaration(Box::new(record))
    }
}
impl From<crate::lexicons::chat::bsky::actor::declaration::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::chat::bsky::actor::declaration::RecordData) -> Self {
        KnownRecord::LexiconsChatBskyActorDeclaration(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::com::atproto::lexicon::schema::Record> for KnownRecord {
    fn from(record: crate::lexicons::com::atproto::lexicon::schema::Record) -> Self {
        KnownRecord::LexiconsComAtprotoLexiconSchema(Box::new(record))
    }
}
impl From<crate::lexicons::com::atproto::lexicon::schema::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::com::atproto::lexicon::schema::RecordData) -> Self {
        KnownRecord::LexiconsComAtprotoLexiconSchema(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::place::stream::live::profile::Record> for KnownRecord {
    fn from(record: crate::lexicons::place::stream::live::profile::Record) -> Self {
        KnownRecord::LexiconsPlaceStreamLiveProfile(Box::new(record))
    }
}
impl From<crate::lexicons::place::stream::live::profile::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::place::stream::live::profile::RecordData) -> Self {
        KnownRecord::LexiconsPlaceStreamLiveProfile(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::tangled::actor::profile::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::tangled::actor::profile::Record) -> Self {
        KnownRecord::LexiconsShTangledActorProfile(Box::new(record))
    }
}
impl From<crate::lexicons::sh::tangled::actor::profile::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::tangled::actor::profile::RecordData) -> Self {
        KnownRecord::LexiconsShTangledActorProfile(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::weaver::actor::profile::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::weaver::actor::profile::Record) -> Self {
        KnownRecord::LexiconsShWeaverActorProfile(Box::new(record))
    }
}
impl From<crate::lexicons::sh::weaver::actor::profile::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::weaver::actor::profile::RecordData) -> Self {
        KnownRecord::LexiconsShWeaverActorProfile(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::weaver::edit::cursor::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::weaver::edit::cursor::Record) -> Self {
        KnownRecord::LexiconsShWeaverEditCursor(Box::new(record))
    }
}
impl From<crate::lexicons::sh::weaver::edit::cursor::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::weaver::edit::cursor::RecordData) -> Self {
        KnownRecord::LexiconsShWeaverEditCursor(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::weaver::edit::diff::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::weaver::edit::diff::Record) -> Self {
        KnownRecord::LexiconsShWeaverEditDiff(Box::new(record))
    }
}
impl From<crate::lexicons::sh::weaver::edit::diff::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::weaver::edit::diff::RecordData) -> Self {
        KnownRecord::LexiconsShWeaverEditDiff(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::weaver::edit::root::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::weaver::edit::root::Record) -> Self {
        KnownRecord::LexiconsShWeaverEditRoot(Box::new(record))
    }
}
impl From<crate::lexicons::sh::weaver::edit::root::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::weaver::edit::root::RecordData) -> Self {
        KnownRecord::LexiconsShWeaverEditRoot(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::weaver::notebook::authors::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::weaver::notebook::authors::Record) -> Self {
        KnownRecord::LexiconsShWeaverNotebookAuthors(Box::new(record))
    }
}
impl From<crate::lexicons::sh::weaver::notebook::authors::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::weaver::notebook::authors::RecordData) -> Self {
        KnownRecord::LexiconsShWeaverNotebookAuthors(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::weaver::notebook::book::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::weaver::notebook::book::Record) -> Self {
        KnownRecord::LexiconsShWeaverNotebookBook(Box::new(record))
    }
}
impl From<crate::lexicons::sh::weaver::notebook::book::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::weaver::notebook::book::RecordData) -> Self {
        KnownRecord::LexiconsShWeaverNotebookBook(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::weaver::notebook::chapter::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::weaver::notebook::chapter::Record) -> Self {
        KnownRecord::LexiconsShWeaverNotebookChapter(Box::new(record))
    }
}
impl From<crate::lexicons::sh::weaver::notebook::chapter::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::weaver::notebook::chapter::RecordData) -> Self {
        KnownRecord::LexiconsShWeaverNotebookChapter(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::weaver::notebook::entry::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::weaver::notebook::entry::Record) -> Self {
        KnownRecord::LexiconsShWeaverNotebookEntry(Box::new(record))
    }
}
impl From<crate::lexicons::sh::weaver::notebook::entry::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::weaver::notebook::entry::RecordData) -> Self {
        KnownRecord::LexiconsShWeaverNotebookEntry(Box::new(record_data.into()))
    }
}
impl From<crate::lexicons::sh::weaver::publish::blob::Record> for KnownRecord {
    fn from(record: crate::lexicons::sh::weaver::publish::blob::Record) -> Self {
        KnownRecord::LexiconsShWeaverPublishBlob(Box::new(record))
    }
}
impl From<crate::lexicons::sh::weaver::publish::blob::RecordData> for KnownRecord {
    fn from(record_data: crate::lexicons::sh::weaver::publish::blob::RecordData) -> Self {
        KnownRecord::LexiconsShWeaverPublishBlob(Box::new(record_data.into()))
    }
}
impl Into<atrium_api::types::Unknown> for KnownRecord {
    fn into(self) -> atrium_api::types::Unknown {
        atrium_api::types::TryIntoUnknown::try_into_unknown(&self).unwrap()
    }
}
